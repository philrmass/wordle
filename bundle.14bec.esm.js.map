{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./data/allWords.txt","webpack:///../node_modules/classnames/index.js","webpack:///./components/PatternSearch.jsx","webpack:///./components/LetterSearch.jsx","webpack:///./components/Home.module.css","webpack:///./components/Home.js","webpack:///../src/index.js","webpack:///./index.js","webpack:///./utilities/words.js","webpack:///./components/PatternSearch.module.css","webpack:///../src/util.js","webpack:///../src/create-element.js","webpack:///../src/component.js","webpack:///../src/diff/children.js","webpack:///../src/diff/props.js","webpack:///../src/diff/index.js","webpack:///../src/render.js","webpack:///../src/clone-element.js","webpack:///../src/create-context.js","webpack:///../src/constants.js","webpack:///../src/options.js","webpack:///../src/diff/catch-error.js","webpack:///./components/LetterPositions.module.css","webpack:///../node_modules/preact-cli/lib/lib/entry.js","webpack:///./data/display.js","webpack:///./components/LetterSearch.module.css","webpack:///./data/answerWords.txt","webpack:///./components/LetterPositions.jsx"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","classNames","classes","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","hasOwn","join","default","PatternSearch","words","className","styles","main","LetterSearch","Home","display","setDisplay","useState","displayDefault","useAll","setUseAll","all","answers","title","version","dropdowns","buildDropdown","displayNames","e","target","separator","wordNames","wordsDefault","description","displayDescriptions","displayElements","namesObj","selectedName","onChange","entries","onchange","map","entry","selected","answerWords","split","allWords","getHookState","index","type","options","currentComponent","currentHook","hooks","__","__h","initialState","reducer","init","hookState","currentIndex","_reducer","invokeOrReturn","action","nextValue","setState","useReducer","flushAfterPaintEffects","component","afterPaintEffects","shift","forEach","invokeCleanup","invokeEffect","hook","comp","cleanup","f","prevRaf","oldBeforeDiff","oldBeforeRender","oldAfterDiff","diffed","oldCommit","oldBeforeUnmount","unmount","vnode","requestAnimationFrame","callback","raf","done","clearTimeout","timeout","HAS_RAF","cancelAnimationFrame","setTimeout","commitQueue","some","filter","cb","hasErrored","App","countLettersByPosition","a","charCodeAt","zeros","from","keys","String","fromCharCode","reduce","letter","counts","word","sortLetterCounts","byLetter","sort","b","assign","obj","props","removeNode","node","parentNode","removeChild","createElement","children","ref","normalizedProps","slice","defaultProps","createVNode","original","__b","__e","__d","undefined","constructor","vnodeId","createRef","current","Fragment","Component","context","getDomSibling","childIndex","indexOf","sibling","updateParentDomPointers","child","base","enqueueRender","rerenderQueue","process","prevDebounce","debounceRendering","defer","queue","oldVNode","oldDom","parentDom","diff","ownerSVGElement","commitRoot","diffChildren","renderResult","newParentVNode","oldParentVNode","globalContext","isSvg","excessDomChildren","isHydrating","j","childVNode","newDom","firstChildDom","refs","oldChildren","EMPTY_ARR","oldChildrenLength","EMPTY_OBJ","reorderChildren","placeChild","applyRef","tmp","toChildArray","out","nextDom","sibDom","outer","appendChild","nextSibling","insertBefore","setStyle","style","setProperty","IS_NON_DIMENSIONAL","test","dom","oldValue","useCapture","cssText","replace","toLowerCase","_listeners","addEventListener","eventProxyCapture","eventProxy","removeEventListener","setAttribute","removeAttribute","event","newVNode","isNew","oldProps","oldState","snapshot","clearProcessingException","newProps","provider","componentContext","newType","contextType","render","doRender","sub","state","getDerivedStateFromProps","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","getChildContext","getSnapshotBeforeUpdate","diffElementNodes","root","oldHtml","newHtml","nodeType","localName","document","createTextNode","createElementNS","is","data","childNodes","dangerouslySetInnerHTML","attributes","innerHTML","hydrate","diffProps","checked","parentVNode","skipRemove","componentWillUnmount","this","replaceNode","firstChild","cloneElement","createContext","defaultValue","contextId","__c","Consumer","contextValue","Provider","subs","ctx","_props","old","splice","isValidElement","error","errorInfo","ctor","handled","getDerivedStateFromError","componentDidCatch","update","forceUpdate","Promise","then","resolve","h","Preact","interopDefault","normalizeURL","url","navigator","serviceWorker","register","__webpack_public_path__","require","getElementById","body","firstElementChild","app","preRenderData","inlineDataElement","querySelector","JSON","parse","decodeURI","CLI_DATA","currentURL","location","pathname","letterSearch","patternSearch","positionCounts","LetterPositions","total","indices","sortedCounts","setSelected","sc","onKeyDown","label","boxes","box","input","buildBoxes","last","lowKey","match","console","log","buildGraphs","columns","column","count","green","yellow","gray","percent","getColors","classnames","letterCount","buildLetter","buildColumn","buildColumns"],"mappings":"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","file":"bundle.14bec.esm.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/wordle-stats/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"mdyV\");\n","export default \"aahed\\naalii\\naargh\\naarti\\nabaca\\nabaci\\nabacs\\nabaft\\nabaka\\nabamp\\naband\\nabash\\nabask\\nabaya\\nabbas\\nabbed\\nabbes\\nabcee\\nabeam\\nabear\\nabele\\nabers\\nabets\\nabies\\nabler\\nables\\nablet\\nablow\\nabmho\\nabohm\\naboil\\naboma\\naboon\\nabord\\nabore\\nabram\\nabray\\nabrim\\nabrin\\nabris\\nabsey\\nabsit\\nabuna\\nabune\\nabuts\\nabuzz\\nabyes\\nabysm\\nacais\\nacari\\naccas\\naccoy\\nacerb\\nacers\\naceta\\nachar\\nached\\naches\\nachoo\\nacids\\nacidy\\nacing\\nacini\\nackee\\nacker\\nacmes\\nacmic\\nacned\\nacnes\\nacock\\nacold\\nacred\\nacres\\nacros\\nacted\\nactin\\nacton\\nacyls\\nadaws\\nadays\\nadbot\\naddax\\nadded\\nadder\\naddio\\naddle\\nadeem\\nadhan\\nadieu\\nadios\\nadits\\nadman\\nadmen\\nadmix\\nadobo\\nadown\\nadoze\\nadrad\\nadred\\nadsum\\naduki\\nadunc\\nadust\\nadvew\\nadyta\\nadzed\\nadzes\\naecia\\naedes\\naegis\\naeons\\naerie\\naeros\\naesir\\nafald\\nafara\\nafars\\nafear\\naflaj\\nafore\\nafrit\\nafros\\nagama\\nagami\\nagars\\nagast\\nagave\\nagaze\\nagene\\nagers\\nagger\\naggie\\naggri\\naggro\\naggry\\naghas\\nagila\\nagios\\nagism\\nagist\\nagita\\naglee\\naglet\\nagley\\nagloo\\naglus\\nagmas\\nagoge\\nagone\\nagons\\nagood\\nagria\\nagrin\\nagros\\nagued\\nagues\\naguna\\naguti\\naheap\\nahent\\nahigh\\nahind\\nahing\\nahint\\nahold\\nahull\\nahuru\\naidas\\naided\\naides\\naidoi\\naidos\\naiery\\naigas\\naight\\nailed\\naimed\\naimer\\nainee\\nainga\\naioli\\naired\\nairer\\nairns\\nairth\\nairts\\naitch\\naitus\\naiver\\naiyee\\naizle\\najies\\najiva\\najuga\\najwan\\nakees\\nakela\\nakene\\naking\\nakita\\nakkas\\nalaap\\nalack\\nalamo\\naland\\nalane\\nalang\\nalans\\nalant\\nalapa\\nalaps\\nalary\\nalate\\nalays\\nalbas\\nalbee\\nalcid\\nalcos\\naldea\\nalder\\naldol\\naleck\\nalecs\\nalefs\\naleft\\naleph\\nalews\\naleye\\nalfas\\nalgal\\nalgas\\nalgid\\nalgin\\nalgor\\nalgum\\nalias\\nalifs\\naline\\nalist\\naliya\\nalkie\\nalkos\\nalkyd\\nalkyl\\nallee\\nallel\\nallis\\nallod\\nallyl\\nalmah\\nalmas\\nalmeh\\nalmes\\nalmud\\nalmug\\nalods\\naloed\\naloes\\naloha\\naloin\\naloos\\nalowe\\naltho\\naltos\\nalula\\nalums\\nalure\\nalvar\\nalway\\namahs\\namain\\namate\\namaut\\namban\\nambit\\nambos\\nambry\\nameba\\nameer\\namene\\namens\\nament\\namias\\namice\\namici\\namide\\namido\\namids\\namies\\namiga\\namigo\\namine\\namino\\namins\\namirs\\namlas\\namman\\nammon\\nammos\\namnia\\namnic\\namnio\\namoks\\namole\\namort\\namour\\namove\\namowt\\namped\\nampul\\namrit\\namuck\\namyls\\nanana\\nanata\\nancho\\nancle\\nancon\\nandro\\nanear\\nanele\\nanent\\nangas\\nanglo\\nanigh\\nanile\\nanils\\nanima\\nanimi\\nanion\\nanise\\nanker\\nankhs\\nankus\\nanlas\\nannal\\nannas\\nannat\\nanoas\\nanole\\nanomy\\nansae\\nantae\\nantar\\nantas\\nanted\\nantes\\nantis\\nantra\\nantre\\nantsy\\nanura\\nanyon\\napace\\napage\\napaid\\napayd\\napays\\napeak\\napeek\\napers\\napert\\napery\\napgar\\naphis\\napian\\napiol\\napish\\napism\\napode\\napods\\napoop\\naport\\nappal\\nappay\\nappel\\nappro\\nappui\\nappuy\\napres\\napses\\napsis\\napsos\\napted\\napter\\naquae\\naquas\\naraba\\naraks\\narame\\narars\\narbas\\narced\\narchi\\narcos\\narcus\\nardeb\\nardri\\naread\\nareae\\nareal\\narear\\nareas\\nareca\\naredd\\narede\\narefy\\nareic\\narene\\narepa\\narere\\narete\\narets\\narett\\nargal\\nargan\\nargil\\nargle\\nargol\\nargon\\nargot\\nargus\\narhat\\narias\\nariel\\nariki\\narils\\nariot\\narish\\narked\\narled\\narles\\narmed\\narmer\\narmet\\narmil\\narnas\\narnut\\naroba\\naroha\\naroid\\narpas\\narpen\\narrah\\narras\\narret\\narris\\narroz\\narsed\\narses\\narsey\\narsis\\nartal\\nartel\\nartic\\nartis\\naruhe\\narums\\narval\\narvee\\narvos\\naryls\\nasana\\nascon\\nascus\\nasdic\\nashed\\nashes\\nashet\\nasked\\nasker\\naskoi\\naskos\\naspen\\nasper\\naspic\\naspie\\naspis\\naspro\\nassai\\nassam\\nasses\\nassez\\nassot\\naster\\nastir\\nastun\\nasura\\nasway\\naswim\\nasyla\\nataps\\nataxy\\natigi\\natilt\\natimy\\natlas\\natman\\natmas\\natmos\\natocs\\natoke\\natoks\\natoms\\natomy\\natony\\natopy\\natria\\natrip\\nattap\\nattar\\natuas\\naudad\\nauger\\naught\\naulas\\naulic\\nauloi\\naulos\\naumil\\naunes\\naunts\\naurae\\naural\\naurar\\nauras\\naurei\\naures\\nauric\\nauris\\naurum\\nautos\\nauxin\\navale\\navant\\navast\\navels\\navens\\navers\\navgas\\navine\\navion\\navise\\naviso\\navize\\navows\\navyze\\nawarn\\nawato\\nawave\\naways\\nawdls\\naweel\\naweto\\nawing\\nawmry\\nawned\\nawner\\nawols\\nawork\\naxels\\naxile\\naxils\\naxing\\naxite\\naxled\\naxles\\naxman\\naxmen\\naxoid\\naxone\\naxons\\nayahs\\nayaya\\nayelp\\naygre\\nayins\\nayont\\nayres\\nayrie\\nazans\\nazide\\nazido\\nazine\\nazlon\\nazoic\\nazole\\nazons\\nazote\\nazoth\\nazuki\\nazurn\\nazury\\nazygy\\nazyme\\nazyms\\nbaaed\\nbaals\\nbabas\\nbabel\\nbabes\\nbabka\\nbaboo\\nbabul\\nbabus\\nbacca\\nbacco\\nbaccy\\nbacha\\nbachs\\nbacks\\nbaddy\\nbaels\\nbaffs\\nbaffy\\nbafts\\nbaghs\\nbagie\\nbahts\\nbahus\\nbahut\\nbails\\nbairn\\nbaisa\\nbaith\\nbaits\\nbaiza\\nbaize\\nbajan\\nbajra\\nbajri\\nbajus\\nbaked\\nbaken\\nbakes\\nbakra\\nbalas\\nbalds\\nbaldy\\nbaled\\nbales\\nbalks\\nbalky\\nballs\\nbally\\nbalms\\nbaloo\\nbalsa\\nbalti\\nbalun\\nbalus\\nbambi\\nbanak\\nbanco\\nbancs\\nbanda\\nbandh\\nbands\\nbandy\\nbaned\\nbanes\\nbangs\\nbania\\nbanks\\nbanns\\nbants\\nbantu\\nbanty\\nbanya\\nbapus\\nbarbe\\nbarbs\\nbarby\\nbarca\\nbarde\\nbardo\\nbards\\nbardy\\nbared\\nbarer\\nbares\\nbarfi\\nbarfs\\nbaric\\nbarks\\nbarky\\nbarms\\nbarmy\\nbarns\\nbarny\\nbarps\\nbarra\\nbarre\\nbarro\\nbarry\\nbarye\\nbasan\\nbased\\nbasen\\nbaser\\nbases\\nbasho\\nbasij\\nbasks\\nbason\\nbasse\\nbassi\\nbasso\\nbassy\\nbasta\\nbasti\\nbasto\\nbasts\\nbated\\nbates\\nbaths\\nbatik\\nbatta\\nbatts\\nbattu\\nbauds\\nbauks\\nbaulk\\nbaurs\\nbavin\\nbawds\\nbawks\\nbawls\\nbawns\\nbawrs\\nbawty\\nbayed\\nbayer\\nbayes\\nbayle\\nbayts\\nbazar\\nbazoo\\nbeads\\nbeaks\\nbeaky\\nbeals\\nbeams\\nbeamy\\nbeano\\nbeans\\nbeany\\nbeare\\nbears\\nbeath\\nbeats\\nbeaty\\nbeaus\\nbeaut\\nbeaux\\nbebop\\nbecap\\nbecke\\nbecks\\nbedad\\nbedel\\nbedes\\nbedew\\nbedim\\nbedye\\nbeedi\\nbeefs\\nbeeps\\nbeers\\nbeery\\nbeets\\nbefog\\nbegad\\nbegar\\nbegem\\nbegot\\nbegum\\nbeige\\nbeigy\\nbeins\\nbekah\\nbelah\\nbelar\\nbelay\\nbelee\\nbelga\\nbells\\nbelon\\nbelts\\nbemad\\nbemas\\nbemix\\nbemud\\nbends\\nbendy\\nbenes\\nbenet\\nbenga\\nbenis\\nbenne\\nbenni\\nbenny\\nbento\\nbents\\nbenty\\nbepat\\nberay\\nberes\\nbergs\\nberko\\nberks\\nberme\\nberms\\nberob\\nberyl\\nbesat\\nbesaw\\nbesee\\nbeses\\nbesit\\nbesom\\nbesot\\nbesti\\nbests\\nbetas\\nbeted\\nbetes\\nbeths\\nbetid\\nbeton\\nbetta\\nbetty\\nbever\\nbevor\\nbevue\\nbevvy\\nbewet\\nbewig\\nbezes\\nbezil\\nbezzy\\nbhais\\nbhaji\\nbhang\\nbhats\\nbhels\\nbhoot\\nbhuna\\nbhuts\\nbiach\\nbiali\\nbialy\\nbibbs\\nbibes\\nbiccy\\nbices\\nbided\\nbider\\nbides\\nbidet\\nbidis\\nbidon\\nbield\\nbiers\\nbiffo\\nbiffs\\nbiffy\\nbifid\\nbigae\\nbiggs\\nbiggy\\nbigha\\nbight\\nbigly\\nbigos\\nbijou\\nbiked\\nbiker\\nbikes\\nbikie\\nbilbo\\nbilby\\nbiled\\nbiles\\nbilgy\\nbilks\\nbills\\nbimah\\nbimas\\nbimbo\\nbinal\\nbindi\\nbinds\\nbiner\\nbines\\nbings\\nbingy\\nbinit\\nbinks\\nbints\\nbiogs\\nbiont\\nbiota\\nbiped\\nbipod\\nbirds\\nbirks\\nbirle\\nbirls\\nbiros\\nbirrs\\nbirse\\nbirsy\\nbises\\nbisks\\nbisom\\nbiter\\nbites\\nbitos\\nbitou\\nbitsy\\nbitte\\nbitts\\nbivia\\nbivvy\\nbizes\\nbizzo\\nbizzy\\nblabs\\nblads\\nblady\\nblaer\\nblaes\\nblaff\\nblags\\nblahs\\nblain\\nblams\\nblart\\nblase\\nblash\\nblate\\nblats\\nblatt\\nblaud\\nblawn\\nblaws\\nblays\\nblear\\nblebs\\nblech\\nblees\\nblent\\nblert\\nblest\\nblets\\nbleys\\nblimy\\nbling\\nblini\\nblins\\nbliny\\nblips\\nblist\\nblite\\nblits\\nblive\\nblobs\\nblocs\\nblogs\\nblook\\nbloop\\nblore\\nblots\\nblows\\nblowy\\nblubs\\nblude\\nbluds\\nbludy\\nblued\\nblues\\nbluet\\nbluey\\nbluid\\nblume\\nblunk\\nblurs\\nblype\\nboabs\\nboaks\\nboars\\nboart\\nboats\\nbobac\\nbobak\\nbobas\\nbobol\\nbobos\\nbocca\\nbocce\\nbocci\\nboche\\nbocks\\nboded\\nbodes\\nbodge\\nbodhi\\nbodle\\nboeps\\nboets\\nboeuf\\nboffo\\nboffs\\nbogan\\nbogey\\nboggy\\nbogie\\nbogle\\nbogue\\nbogus\\nbohea\\nbohos\\nboils\\nboing\\nboink\\nboite\\nboked\\nbokeh\\nbokes\\nbokos\\nbolar\\nbolas\\nbolds\\nboles\\nbolix\\nbolls\\nbolos\\nbolts\\nbolus\\nbomas\\nbombe\\nbombo\\nbombs\\nbonce\\nbonds\\nboned\\nboner\\nbones\\nbongs\\nbonie\\nbonks\\nbonne\\nbonny\\nbonza\\nbonze\\nbooai\\nbooay\\nboobs\\nboody\\nbooed\\nboofy\\nboogy\\nboohs\\nbooks\\nbooky\\nbools\\nbooms\\nboomy\\nboong\\nboons\\nboord\\nboors\\nboose\\nboots\\nboppy\\nborak\\nboral\\nboras\\nborde\\nbords\\nbored\\nboree\\nborel\\nborer\\nbores\\nborgo\\nboric\\nborks\\nborms\\nborna\\nboron\\nborts\\nborty\\nbortz\\nbosie\\nbosks\\nbosky\\nboson\\nbosun\\nbotas\\nbotel\\nbotes\\nbothy\\nbotte\\nbotts\\nbotty\\nbouge\\nbouks\\nboult\\nbouns\\nbourd\\nbourg\\nbourn\\nbouse\\nbousy\\nbouts\\nbovid\\nbowat\\nbowed\\nbower\\nbowes\\nbowet\\nbowie\\nbowls\\nbowne\\nbowrs\\nbowse\\nboxed\\nboxen\\nboxes\\nboxla\\nboxty\\nboyar\\nboyau\\nboyed\\nboyfs\\nboygs\\nboyla\\nboyos\\nboysy\\nbozos\\nbraai\\nbrach\\nbrack\\nbract\\nbrads\\nbraes\\nbrags\\nbrail\\nbraks\\nbraky\\nbrame\\nbrane\\nbrank\\nbrans\\nbrant\\nbrast\\nbrats\\nbrava\\nbravi\\nbraws\\nbraxy\\nbrays\\nbraza\\nbraze\\nbream\\nbrede\\nbreds\\nbreem\\nbreer\\nbrees\\nbreid\\nbreis\\nbreme\\nbrens\\nbrent\\nbrere\\nbrers\\nbreve\\nbrews\\nbreys\\nbrier\\nbries\\nbrigs\\nbriki\\nbriks\\nbrill\\nbrims\\nbrins\\nbrios\\nbrise\\nbriss\\nbrith\\nbrits\\nbritt\\nbrize\\nbroch\\nbrock\\nbrods\\nbrogh\\nbrogs\\nbrome\\nbromo\\nbronc\\nbrond\\nbrool\\nbroos\\nbrose\\nbrosy\\nbrows\\nbrugh\\nbruin\\nbruit\\nbrule\\nbrume\\nbrung\\nbrusk\\nbrust\\nbruts\\nbuats\\nbuaze\\nbubal\\nbubas\\nbubba\\nbubbe\\nbubby\\nbubus\\nbuchu\\nbucko\\nbucks\\nbucku\\nbudas\\nbudis\\nbudos\\nbuffa\\nbuffe\\nbuffi\\nbuffo\\nbuffs\\nbuffy\\nbufos\\nbufty\\nbuhls\\nbuhrs\\nbuiks\\nbuist\\nbukes\\nbulbs\\nbulgy\\nbulks\\nbulla\\nbulls\\nbulse\\nbumbo\\nbumfs\\nbumph\\nbumps\\nbumpy\\nbunas\\nbunce\\nbunco\\nbunde\\nbundh\\nbunds\\nbundt\\nbundu\\nbundy\\nbungs\\nbungy\\nbunia\\nbunje\\nbunjy\\nbunko\\nbunks\\nbunns\\nbunts\\nbunty\\nbunya\\nbuoys\\nbuppy\\nburan\\nburas\\nburbs\\nburds\\nburet\\nburfi\\nburgh\\nburgs\\nburin\\nburka\\nburke\\nburks\\nburls\\nburns\\nburoo\\nburps\\nburqa\\nburro\\nburrs\\nburry\\nbursa\\nburse\\nbusby\\nbuses\\nbusks\\nbusky\\nbussu\\nbusti\\nbusts\\nbusty\\nbuteo\\nbutes\\nbutle\\nbutoh\\nbutts\\nbutty\\nbutut\\nbutyl\\nbuzzy\\nbwana\\nbwazi\\nbyded\\nbydes\\nbyked\\nbykes\\nbyres\\nbyrls\\nbyssi\\nbytes\\nbyway\\ncaaed\\ncabas\\ncaber\\ncabob\\ncaboc\\ncabre\\ncacas\\ncacks\\ncacky\\ncadee\\ncades\\ncadge\\ncadgy\\ncadie\\ncadis\\ncadre\\ncaeca\\ncaese\\ncafes\\ncaffs\\ncaged\\ncager\\ncages\\ncagot\\ncahow\\ncaids\\ncains\\ncaird\\ncajon\\ncajun\\ncaked\\ncakes\\ncakey\\ncalfs\\ncalid\\ncalif\\ncalix\\ncalks\\ncalla\\ncalls\\ncalms\\ncalmy\\ncalos\\ncalpa\\ncalps\\ncalve\\ncalyx\\ncaman\\ncamas\\ncames\\ncamis\\ncamos\\ncampi\\ncampo\\ncamps\\ncampy\\ncamus\\ncaned\\ncaneh\\ncaner\\ncanes\\ncangs\\ncanid\\ncanna\\ncanns\\ncanso\\ncanst\\ncanto\\ncants\\ncanty\\ncapas\\ncaped\\ncapes\\ncapex\\ncaphs\\ncapiz\\ncaple\\ncapon\\ncapos\\ncapot\\ncapri\\ncapul\\ncarap\\ncarbo\\ncarbs\\ncarby\\ncardi\\ncards\\ncardy\\ncared\\ncarer\\ncares\\ncaret\\ncarex\\ncarks\\ncarle\\ncarls\\ncarns\\ncarny\\ncarob\\ncarom\\ncaron\\ncarpi\\ncarps\\ncarrs\\ncarse\\ncarta\\ncarte\\ncarts\\ncarvy\\ncasas\\ncasco\\ncased\\ncases\\ncasks\\ncasky\\ncasts\\ncasus\\ncates\\ncauda\\ncauks\\ncauld\\ncauls\\ncaums\\ncaups\\ncauri\\ncausa\\ncavas\\ncaved\\ncavel\\ncaver\\ncaves\\ncavie\\ncawed\\ncawks\\ncaxon\\nceaze\\ncebid\\ncecal\\ncecum\\nceded\\nceder\\ncedes\\ncedis\\nceiba\\nceili\\nceils\\nceleb\\ncella\\ncelli\\ncells\\ncelom\\ncelts\\ncense\\ncento\\ncents\\ncentu\\nceorl\\ncepes\\ncerci\\ncered\\nceres\\ncerge\\nceria\\nceric\\ncerne\\nceroc\\nceros\\ncerts\\ncerty\\ncesse\\ncesta\\ncesti\\ncetes\\ncetyl\\ncezve\\nchace\\nchack\\nchaco\\nchado\\nchads\\nchaft\\nchais\\nchals\\nchams\\nchana\\nchang\\nchank\\nchape\\nchaps\\nchapt\\nchara\\nchare\\nchark\\ncharr\\nchars\\nchary\\nchats\\nchave\\nchavs\\nchawk\\nchaws\\nchaya\\nchays\\ncheep\\nchefs\\ncheka\\nchela\\nchelp\\nchemo\\nchems\\nchere\\nchert\\ncheth\\nchevy\\nchews\\nchewy\\nchiao\\nchias\\nchibs\\nchica\\nchich\\nchico\\nchics\\nchiel\\nchiks\\nchile\\nchimb\\nchimo\\nchimp\\nchine\\nching\\nchino\\nchins\\nchips\\nchirk\\nchirl\\nchirm\\nchiro\\nchirr\\nchirt\\nchiru\\nchits\\nchive\\nchivs\\nchivy\\nchizz\\nchoco\\nchocs\\nchode\\nchogs\\nchoil\\nchoko\\nchoky\\nchola\\ncholi\\ncholo\\nchomp\\nchons\\nchoof\\nchook\\nchoom\\nchoon\\nchops\\nchota\\nchott\\nchout\\nchoux\\nchowk\\nchows\\nchubs\\nchufa\\nchuff\\nchugs\\nchums\\nchurl\\nchurr\\nchuse\\nchuts\\nchyle\\nchyme\\nchynd\\ncibol\\ncided\\ncides\\nciels\\nciggy\\ncilia\\ncills\\ncimar\\ncimex\\ncinct\\ncines\\ncinqs\\ncions\\ncippi\\ncircs\\ncires\\ncirls\\ncirri\\ncisco\\ncissy\\ncists\\ncital\\ncited\\nciter\\ncites\\ncives\\ncivet\\ncivie\\ncivvy\\nclach\\nclade\\nclads\\nclaes\\nclags\\nclame\\nclams\\nclans\\nclaps\\nclapt\\nclaro\\nclart\\nclary\\nclast\\nclats\\nclaut\\nclave\\nclavi\\nclaws\\nclays\\ncleck\\ncleek\\ncleep\\nclefs\\nclegs\\ncleik\\nclems\\nclepe\\nclept\\ncleve\\nclews\\nclied\\nclies\\nclift\\nclime\\ncline\\nclint\\nclipe\\nclips\\nclipt\\nclits\\ncloam\\nclods\\ncloff\\nclogs\\ncloke\\nclomb\\nclomp\\nclonk\\nclons\\ncloop\\ncloot\\nclops\\nclote\\nclots\\nclour\\nclous\\nclows\\ncloye\\ncloys\\ncloze\\nclubs\\nclues\\ncluey\\nclunk\\nclype\\ncnida\\ncoact\\ncoady\\ncoala\\ncoals\\ncoaly\\ncoapt\\ncoarb\\ncoate\\ncoati\\ncoats\\ncobbs\\ncobby\\ncobia\\ncoble\\ncobza\\ncocas\\ncocci\\ncocco\\ncocks\\ncocky\\ncocos\\ncodas\\ncodec\\ncoded\\ncoden\\ncoder\\ncodes\\ncodex\\ncodon\\ncoeds\\ncoffs\\ncogie\\ncogon\\ncogue\\ncohab\\ncohen\\ncohoe\\ncohog\\ncohos\\ncoifs\\ncoign\\ncoils\\ncoins\\ncoirs\\ncoits\\ncoked\\ncokes\\ncolas\\ncolby\\ncolds\\ncoled\\ncoles\\ncoley\\ncolic\\ncolin\\ncolls\\ncolly\\ncolog\\ncolts\\ncolza\\ncomae\\ncomal\\ncomas\\ncombe\\ncombi\\ncombo\\ncombs\\ncomby\\ncomer\\ncomes\\ncomix\\ncommo\\ncomms\\ncommy\\ncompo\\ncomps\\ncompt\\ncomte\\ncomus\\nconed\\ncones\\nconey\\nconfs\\nconga\\nconge\\ncongo\\nconia\\nconin\\nconks\\nconky\\nconne\\nconns\\nconte\\nconto\\nconus\\nconvo\\ncooch\\ncooed\\ncooee\\ncooer\\ncooey\\ncoofs\\ncooks\\ncooky\\ncools\\ncooly\\ncoomb\\ncooms\\ncoomy\\ncoops\\ncoopt\\ncoost\\ncoots\\ncooze\\ncopal\\ncopay\\ncoped\\ncopen\\ncoper\\ncopes\\ncoppy\\ncopra\\ncopsy\\ncoqui\\ncoram\\ncorbe\\ncorby\\ncords\\ncored\\ncores\\ncorey\\ncorgi\\ncoria\\ncorks\\ncorky\\ncorms\\ncorni\\ncorno\\ncorns\\ncornu\\ncorps\\ncorse\\ncorso\\ncosec\\ncosed\\ncoses\\ncoset\\ncosey\\ncosie\\ncosta\\ncoste\\ncosts\\ncotan\\ncoted\\ncotes\\ncoths\\ncotta\\ncotts\\ncoude\\ncoups\\ncourb\\ncourd\\ncoure\\ncours\\ncouta\\ncouth\\ncoved\\ncoves\\ncovin\\ncowal\\ncowan\\ncowed\\ncowks\\ncowls\\ncowps\\ncowry\\ncoxae\\ncoxal\\ncoxed\\ncoxes\\ncoxib\\ncoyau\\ncoyed\\ncoyer\\ncoypu\\ncozed\\ncozen\\ncozes\\ncozey\\ncozie\\ncraal\\ncrabs\\ncrags\\ncraic\\ncraig\\ncrake\\ncrame\\ncrams\\ncrans\\ncrape\\ncraps\\ncrapy\\ncrare\\ncraws\\ncrays\\ncreds\\ncreel\\ncrees\\ncrems\\ncrena\\ncreps\\ncrepy\\ncrewe\\ncrews\\ncrias\\ncribs\\ncries\\ncrims\\ncrine\\ncrios\\ncripe\\ncrips\\ncrise\\ncrith\\ncrits\\ncroci\\ncrocs\\ncroft\\ncrogs\\ncromb\\ncrome\\ncronk\\ncrons\\ncrool\\ncroon\\ncrops\\ncrore\\ncrost\\ncrout\\ncrows\\ncroze\\ncruck\\ncrudo\\ncruds\\ncrudy\\ncrues\\ncruet\\ncruft\\ncrunk\\ncruor\\ncrura\\ncruse\\ncrusy\\ncruve\\ncrwth\\ncryer\\nctene\\ncubby\\ncubeb\\ncubed\\ncuber\\ncubes\\ncubit\\ncuddy\\ncuffo\\ncuffs\\ncuifs\\ncuing\\ncuish\\ncuits\\ncukes\\nculch\\nculet\\nculex\\nculls\\ncully\\nculms\\nculpa\\nculti\\ncults\\nculty\\ncumec\\ncundy\\ncunei\\ncunit\\ncunts\\ncupel\\ncupid\\ncuppa\\ncuppy\\ncurat\\ncurbs\\ncurch\\ncurds\\ncurdy\\ncured\\ncurer\\ncures\\ncuret\\ncurfs\\ncuria\\ncurie\\ncurli\\ncurls\\ncurns\\ncurny\\ncurrs\\ncursi\\ncurst\\ncusec\\ncushy\\ncusks\\ncusps\\ncuspy\\ncusso\\ncusum\\ncutch\\ncuter\\ncutes\\ncutey\\ncutin\\ncutis\\ncutto\\ncutty\\ncutup\\ncuvee\\ncuzes\\ncwtch\\ncyano\\ncyans\\ncycad\\ncycas\\ncyclo\\ncyder\\ncylix\\ncymae\\ncymar\\ncymas\\ncymes\\ncymol\\ncysts\\ncytes\\ncyton\\nczars\\ndaals\\ndabba\\ndaces\\ndacha\\ndacks\\ndadah\\ndadas\\ndados\\ndaffs\\ndaffy\\ndagga\\ndaggy\\ndagos\\ndahls\\ndaiko\\ndaine\\ndaint\\ndaker\\ndaled\\ndales\\ndalis\\ndalle\\ndalts\\ndaman\\ndamar\\ndames\\ndamme\\ndamns\\ndamps\\ndampy\\ndancy\\ndangs\\ndanio\\ndanks\\ndanny\\ndants\\ndaraf\\ndarbs\\ndarcy\\ndared\\ndarer\\ndares\\ndarga\\ndargs\\ndaric\\ndaris\\ndarks\\ndarns\\ndarre\\ndarts\\ndarzi\\ndashi\\ndashy\\ndatal\\ndated\\ndater\\ndates\\ndatos\\ndatto\\ndaube\\ndaubs\\ndauby\\ndauds\\ndault\\ndaurs\\ndauts\\ndaven\\ndavit\\ndawah\\ndawds\\ndawed\\ndawen\\ndawks\\ndawns\\ndawts\\ndayan\\ndaych\\ndaynt\\ndazed\\ndazer\\ndazes\\ndeads\\ndeair\\ndeals\\ndeans\\ndeare\\ndearn\\ndears\\ndeary\\ndeash\\ndeave\\ndeaws\\ndeawy\\ndebag\\ndebby\\ndebel\\ndebes\\ndebts\\ndebud\\ndebur\\ndebus\\ndebye\\ndecad\\ndecaf\\ndecan\\ndecko\\ndecks\\ndecos\\ndedal\\ndeeds\\ndeedy\\ndeely\\ndeems\\ndeens\\ndeeps\\ndeere\\ndeers\\ndeets\\ndeeve\\ndeevs\\ndefat\\ndeffo\\ndefis\\ndefog\\ndegas\\ndegum\\ndegus\\ndeice\\ndeids\\ndeify\\ndeils\\ndeism\\ndeist\\ndeked\\ndekes\\ndekko\\ndeled\\ndeles\\ndelfs\\ndelft\\ndelis\\ndells\\ndelly\\ndelos\\ndelph\\ndelts\\ndeman\\ndemes\\ndemic\\ndemit\\ndemob\\ndemoi\\ndemos\\ndempt\\ndenar\\ndenay\\ndench\\ndenes\\ndenet\\ndenis\\ndents\\ndeoxy\\nderat\\nderay\\ndered\\nderes\\nderig\\nderma\\nderms\\nderns\\nderny\\nderos\\nderro\\nderry\\nderth\\ndervs\\ndesex\\ndeshi\\ndesis\\ndesks\\ndesse\\ndevas\\ndevel\\ndevis\\ndevon\\ndevos\\ndevot\\ndewan\\ndewar\\ndewax\\ndewed\\ndexes\\ndexie\\ndhaba\\ndhaks\\ndhals\\ndhikr\\ndhobi\\ndhole\\ndholl\\ndhols\\ndhoti\\ndhows\\ndhuti\\ndiact\\ndials\\ndiane\\ndiazo\\ndibbs\\ndiced\\ndicer\\ndices\\ndicht\\ndicks\\ndicky\\ndicot\\ndicta\\ndicts\\ndicty\\ndiddy\\ndidie\\ndidos\\ndidst\\ndiebs\\ndiels\\ndiene\\ndiets\\ndiffs\\ndight\\ndikas\\ndiked\\ndiker\\ndikes\\ndikey\\ndildo\\ndilli\\ndills\\ndimbo\\ndimer\\ndimes\\ndimps\\ndinar\\ndined\\ndines\\ndinge\\ndings\\ndinic\\ndinks\\ndinky\\ndinna\\ndinos\\ndints\\ndiols\\ndiota\\ndippy\\ndipso\\ndiram\\ndirer\\ndirke\\ndirks\\ndirls\\ndirts\\ndisas\\ndisci\\ndiscs\\ndishy\\ndisks\\ndisme\\ndital\\nditas\\ndited\\ndites\\nditsy\\nditts\\nditzy\\ndivan\\ndivas\\ndived\\ndives\\ndivis\\ndivna\\ndivos\\ndivot\\ndivvy\\ndiwan\\ndixie\\ndixit\\ndiyas\\ndizen\\ndjinn\\ndjins\\ndoabs\\ndoats\\ndobby\\ndobes\\ndobie\\ndobla\\ndobra\\ndobro\\ndocht\\ndocks\\ndocos\\ndocus\\ndoddy\\ndodos\\ndoeks\\ndoers\\ndoest\\ndoeth\\ndoffs\\ndogan\\ndoges\\ndogey\\ndoggo\\ndoggy\\ndogie\\ndohyo\\ndoilt\\ndoily\\ndoits\\ndojos\\ndolce\\ndolci\\ndoled\\ndoles\\ndolia\\ndolls\\ndolma\\ndolor\\ndolos\\ndolts\\ndomal\\ndomed\\ndomes\\ndomic\\ndonah\\ndonas\\ndonee\\ndoner\\ndonga\\ndongs\\ndonko\\ndonna\\ndonne\\ndonny\\ndonsy\\ndoobs\\ndooce\\ndoody\\ndooks\\ndoole\\ndools\\ndooly\\ndooms\\ndoomy\\ndoona\\ndoorn\\ndoors\\ndoozy\\ndopas\\ndoped\\ndoper\\ndopes\\ndorad\\ndorba\\ndorbs\\ndoree\\ndores\\ndoric\\ndoris\\ndorks\\ndorky\\ndorms\\ndormy\\ndorps\\ndorrs\\ndorsa\\ndorse\\ndorts\\ndorty\\ndosai\\ndosas\\ndosed\\ndoseh\\ndoser\\ndoses\\ndosha\\ndotal\\ndoted\\ndoter\\ndotes\\ndotty\\ndouar\\ndouce\\ndoucs\\ndouks\\ndoula\\ndouma\\ndoums\\ndoups\\ndoura\\ndouse\\ndouts\\ndoved\\ndoven\\ndover\\ndoves\\ndovie\\ndowar\\ndowds\\ndowed\\ndower\\ndowie\\ndowle\\ndowls\\ndowly\\ndowna\\ndowns\\ndowps\\ndowse\\ndowts\\ndoxed\\ndoxes\\ndoxie\\ndoyen\\ndoyly\\ndozed\\ndozer\\ndozes\\ndrabs\\ndrack\\ndraco\\ndraff\\ndrags\\ndrail\\ndrams\\ndrant\\ndraps\\ndrats\\ndrave\\ndraws\\ndrays\\ndrear\\ndreck\\ndreed\\ndreer\\ndrees\\ndregs\\ndreks\\ndrent\\ndrere\\ndrest\\ndreys\\ndribs\\ndrice\\ndries\\ndrily\\ndrips\\ndript\\ndroid\\ndroil\\ndroke\\ndrole\\ndrome\\ndrony\\ndroob\\ndroog\\ndrook\\ndrops\\ndropt\\ndrouk\\ndrows\\ndrubs\\ndrugs\\ndrums\\ndrupe\\ndruse\\ndrusy\\ndruxy\\ndryad\\ndryas\\ndsobo\\ndsomo\\nduads\\nduals\\nduans\\nduars\\ndubbo\\nducal\\nducat\\nduces\\nducks\\nducky\\nducts\\nduddy\\nduded\\ndudes\\nduels\\nduets\\nduett\\nduffs\\ndufus\\nduing\\nduits\\ndukas\\nduked\\ndukes\\ndukka\\ndulce\\ndules\\ndulia\\ndulls\\ndulse\\ndumas\\ndumbo\\ndumbs\\ndumka\\ndumky\\ndumps\\ndunam\\ndunch\\ndunes\\ndungs\\ndungy\\ndunks\\ndunno\\ndunny\\ndunsh\\ndunts\\nduomi\\nduomo\\nduped\\nduper\\ndupes\\nduple\\nduply\\nduppy\\ndural\\nduras\\ndured\\ndures\\ndurgy\\ndurns\\nduroc\\nduros\\nduroy\\ndurra\\ndurrs\\ndurry\\ndurst\\ndurum\\ndurzi\\ndusks\\ndusts\\nduxes\\ndwaal\\ndwale\\ndwalm\\ndwams\\ndwang\\ndwaum\\ndweeb\\ndwile\\ndwine\\ndyads\\ndyers\\ndykon\\ndynel\\ndynes\\ndzhos\\neagre\\nealed\\neales\\neaned\\neards\\neared\\nearls\\nearns\\nearnt\\nearst\\neased\\neaser\\neases\\neasle\\neasts\\neathe\\neaved\\neaves\\nebbed\\nebbet\\nebons\\nebook\\necads\\neched\\neches\\nechos\\necrus\\nedema\\nedged\\nedger\\nedges\\nedile\\nedits\\neduce\\neduct\\neejit\\neensy\\neeven\\neevns\\neffed\\negads\\negers\\negest\\neggar\\negged\\negger\\negmas\\nehing\\neider\\neidos\\neigne\\neiked\\neikon\\neilds\\neisel\\nejido\\nekkas\\nelain\\neland\\nelans\\nelchi\\neldin\\nelemi\\nelfed\\neliad\\nelint\\nelmen\\neloge\\nelogy\\neloin\\nelops\\nelpee\\nelsin\\nelute\\nelvan\\nelven\\nelver\\nelves\\nemacs\\nembar\\nembay\\nembog\\nembow\\nembox\\nembus\\nemeer\\nemend\\nemerg\\nemery\\nemeus\\nemics\\nemirs\\nemits\\nemmas\\nemmer\\nemmet\\nemmew\\nemmys\\nemoji\\nemong\\nemote\\nemove\\nempts\\nemule\\nemure\\nemyde\\nemyds\\nenarm\\nenate\\nended\\nender\\nendew\\nendue\\nenews\\nenfix\\neniac\\nenlit\\nenmew\\nennog\\nenoki\\nenols\\nenorm\\nenows\\nenrol\\nensew\\nensky\\nentia\\nenure\\nenurn\\nenvoi\\nenzym\\neorls\\neosin\\nepact\\nepees\\nephah\\nephas\\nephod\\nephor\\nepics\\nepode\\nepopt\\nepris\\neques\\nequid\\nerbia\\nerevs\\nergon\\nergos\\nergot\\nerhus\\nerica\\nerick\\nerics\\nering\\nerned\\nernes\\nerose\\nerred\\nerses\\neruct\\nerugo\\neruvs\\nerven\\nervil\\nescar\\nescot\\nesile\\neskar\\nesker\\nesnes\\nesses\\nestoc\\nestop\\nestro\\netage\\netape\\netats\\netens\\nethal\\nethne\\nethyl\\netics\\netnas\\nettin\\nettle\\netuis\\netwee\\netyma\\neughs\\neuked\\neupad\\neuros\\neusol\\nevens\\nevert\\nevets\\nevhoe\\nevils\\nevite\\nevohe\\newers\\newest\\newhow\\newked\\nexams\\nexeat\\nexecs\\nexeem\\nexeme\\nexfil\\nexies\\nexine\\nexing\\nexits\\nexode\\nexome\\nexons\\nexpat\\nexpos\\nexude\\nexuls\\nexurb\\neyass\\neyers\\neyots\\neyras\\neyres\\neyrie\\neyrir\\nezine\\nfabby\\nfaced\\nfacer\\nfaces\\nfacia\\nfacta\\nfacts\\nfaddy\\nfaded\\nfader\\nfades\\nfadge\\nfados\\nfaena\\nfaery\\nfaffs\\nfaffy\\nfagin\\nfaiks\\nfails\\nfaine\\nfains\\nfairs\\nfaked\\nfaker\\nfakes\\nfakey\\nfakie\\nfakir\\nfalaj\\nfalls\\nfamed\\nfames\\nfanal\\nfands\\nfanes\\nfanga\\nfango\\nfangs\\nfanks\\nfanon\\nfanos\\nfanum\\nfaqir\\nfarad\\nfarci\\nfarcy\\nfards\\nfared\\nfarer\\nfares\\nfarle\\nfarls\\nfarms\\nfaros\\nfarro\\nfarse\\nfarts\\nfasci\\nfasti\\nfasts\\nfated\\nfates\\nfatly\\nfatso\\nfatwa\\nfaugh\\nfauld\\nfauns\\nfaurd\\nfauts\\nfauve\\nfavas\\nfavel\\nfaver\\nfaves\\nfavus\\nfawns\\nfawny\\nfaxed\\nfaxes\\nfayed\\nfayer\\nfayne\\nfayre\\nfazed\\nfazes\\nfeals\\nfeare\\nfears\\nfeart\\nfease\\nfeats\\nfeaze\\nfeces\\nfecht\\nfecit\\nfecks\\nfedex\\nfeebs\\nfeeds\\nfeels\\nfeens\\nfeers\\nfeese\\nfeeze\\nfehme\\nfeint\\nfeist\\nfelch\\nfelid\\nfells\\nfelly\\nfelts\\nfelty\\nfemal\\nfemes\\nfemmy\\nfends\\nfendy\\nfenis\\nfenks\\nfenny\\nfents\\nfeods\\nfeoff\\nferer\\nferes\\nferia\\nferly\\nfermi\\nferms\\nferns\\nferny\\nfesse\\nfesta\\nfests\\nfesty\\nfetas\\nfeted\\nfetes\\nfetor\\nfetta\\nfetts\\nfetwa\\nfeuar\\nfeuds\\nfeued\\nfeyed\\nfeyer\\nfeyly\\nfezes\\nfezzy\\nfiars\\nfiats\\nfibro\\nfices\\nfiche\\nfichu\\nficin\\nficos\\nfides\\nfidge\\nfidos\\nfiefs\\nfient\\nfiere\\nfiers\\nfiest\\nfifed\\nfifer\\nfifes\\nfifis\\nfiggy\\nfigos\\nfiked\\nfikes\\nfilar\\nfilch\\nfiled\\nfiles\\nfilii\\nfilks\\nfille\\nfillo\\nfills\\nfilmi\\nfilms\\nfilos\\nfilum\\nfinca\\nfinds\\nfined\\nfines\\nfinis\\nfinks\\nfinny\\nfinos\\nfiord\\nfiqhs\\nfique\\nfired\\nfirer\\nfires\\nfirie\\nfirks\\nfirms\\nfirns\\nfirry\\nfirth\\nfiscs\\nfisks\\nfists\\nfisty\\nfitch\\nfitly\\nfitna\\nfitte\\nfitts\\nfiver\\nfives\\nfixed\\nfixes\\nfixit\\nfjeld\\nflabs\\nflaff\\nflags\\nflaks\\nflamm\\nflams\\nflamy\\nflane\\nflans\\nflaps\\nflary\\nflats\\nflava\\nflawn\\nflaws\\nflawy\\nflaxy\\nflays\\nfleam\\nfleas\\nfleek\\nfleer\\nflees\\nflegs\\nfleme\\nfleur\\nflews\\nflexi\\nflexo\\nfleys\\nflics\\nflied\\nflies\\nflimp\\nflims\\nflips\\nflirs\\nflisk\\nflite\\nflits\\nflitt\\nflobs\\nflocs\\nfloes\\nflogs\\nflong\\nflops\\nflors\\nflory\\nflosh\\nflota\\nflote\\nflows\\nflubs\\nflued\\nflues\\nfluey\\nfluky\\nflump\\nfluor\\nflurr\\nfluty\\nfluyt\\nflyby\\nflype\\nflyte\\nfoals\\nfoams\\nfoehn\\nfogey\\nfogie\\nfogle\\nfogou\\nfohns\\nfoids\\nfoils\\nfoins\\nfolds\\nfoley\\nfolia\\nfolic\\nfolie\\nfolks\\nfolky\\nfomes\\nfonda\\nfonds\\nfondu\\nfones\\nfonly\\nfonts\\nfoods\\nfoody\\nfools\\nfoots\\nfooty\\nforam\\nforbs\\nforby\\nfordo\\nfords\\nforel\\nfores\\nforex\\nforks\\nforky\\nforme\\nforms\\nforts\\nforza\\nforze\\nfossa\\nfosse\\nfouat\\nfouds\\nfouer\\nfouet\\nfoule\\nfouls\\nfount\\nfours\\nfouth\\nfovea\\nfowls\\nfowth\\nfoxed\\nfoxes\\nfoxie\\nfoyle\\nfoyne\\nfrabs\\nfrack\\nfract\\nfrags\\nfraim\\nfranc\\nfrape\\nfraps\\nfrass\\nfrate\\nfrati\\nfrats\\nfraus\\nfrays\\nfrees\\nfreet\\nfreit\\nfremd\\nfrena\\nfreon\\nfrere\\nfrets\\nfribs\\nfrier\\nfries\\nfrigs\\nfrise\\nfrist\\nfrith\\nfrits\\nfritt\\nfrize\\nfrizz\\nfroes\\nfrogs\\nfrons\\nfrore\\nfrorn\\nfrory\\nfrosh\\nfrows\\nfrowy\\nfrugs\\nfrump\\nfrush\\nfrust\\nfryer\\nfubar\\nfubby\\nfubsy\\nfucks\\nfucus\\nfuddy\\nfudgy\\nfuels\\nfuero\\nfuffs\\nfuffy\\nfugal\\nfuggy\\nfugie\\nfugio\\nfugle\\nfugly\\nfugus\\nfujis\\nfulls\\nfumed\\nfumer\\nfumes\\nfumet\\nfundi\\nfunds\\nfundy\\nfungo\\nfungs\\nfunks\\nfural\\nfuran\\nfurca\\nfurls\\nfurol\\nfurrs\\nfurth\\nfurze\\nfurzy\\nfused\\nfusee\\nfusel\\nfuses\\nfusil\\nfusks\\nfusts\\nfusty\\nfuton\\nfuzed\\nfuzee\\nfuzes\\nfuzil\\nfyces\\nfyked\\nfykes\\nfyles\\nfyrds\\nfytte\\ngabba\\ngabby\\ngable\\ngaddi\\ngades\\ngadge\\ngadid\\ngadis\\ngadje\\ngadjo\\ngadso\\ngaffs\\ngaged\\ngager\\ngages\\ngaids\\ngains\\ngairs\\ngaita\\ngaits\\ngaitt\\ngajos\\ngalah\\ngalas\\ngalax\\ngalea\\ngaled\\ngales\\ngalls\\ngally\\ngalop\\ngalut\\ngalvo\\ngamas\\ngamay\\ngamba\\ngambe\\ngambo\\ngambs\\ngamed\\ngames\\ngamey\\ngamic\\ngamin\\ngamme\\ngammy\\ngamps\\nganch\\ngandy\\nganef\\nganev\\ngangs\\nganja\\nganof\\ngants\\ngaols\\ngaped\\ngaper\\ngapes\\ngapos\\ngappy\\ngarbe\\ngarbo\\ngarbs\\ngarda\\ngares\\ngaris\\ngarms\\ngarni\\ngarre\\ngarth\\ngarum\\ngases\\ngasps\\ngaspy\\ngasts\\ngatch\\ngated\\ngater\\ngates\\ngaths\\ngator\\ngauch\\ngaucy\\ngauds\\ngauje\\ngault\\ngaums\\ngaumy\\ngaups\\ngaurs\\ngauss\\ngauzy\\ngavot\\ngawcy\\ngawds\\ngawks\\ngawps\\ngawsy\\ngayal\\ngazal\\ngazar\\ngazed\\ngazes\\ngazon\\ngazoo\\ngeals\\ngeans\\ngeare\\ngears\\ngeats\\ngebur\\ngecks\\ngeeks\\ngeeps\\ngeest\\ngeist\\ngeits\\ngelds\\ngelee\\ngelid\\ngelly\\ngelts\\ngemel\\ngemma\\ngemmy\\ngemot\\ngenal\\ngenas\\ngenes\\ngenet\\ngenic\\ngenii\\ngenip\\ngenny\\ngenoa\\ngenom\\ngenro\\ngents\\ngenty\\ngenua\\ngenus\\ngeode\\ngeoid\\ngerah\\ngerbe\\ngeres\\ngerle\\ngerms\\ngermy\\ngerne\\ngesse\\ngesso\\ngeste\\ngests\\ngetas\\ngetup\\ngeums\\ngeyan\\ngeyer\\nghast\\nghats\\nghaut\\nghazi\\nghees\\nghest\\nghyll\\ngibed\\ngibel\\ngiber\\ngibes\\ngibli\\ngibus\\ngifts\\ngigas\\ngighe\\ngigot\\ngigue\\ngilas\\ngilds\\ngilet\\ngills\\ngilly\\ngilpy\\ngilts\\ngimel\\ngimme\\ngimps\\ngimpy\\nginch\\nginge\\ngings\\nginks\\nginny\\nginzo\\ngipon\\ngippo\\ngippy\\ngirds\\ngirls\\ngirns\\ngiron\\ngiros\\ngirrs\\ngirsh\\ngirts\\ngismo\\ngisms\\ngists\\ngitch\\ngites\\ngiust\\ngived\\ngives\\ngizmo\\nglace\\nglads\\nglady\\nglaik\\nglair\\nglams\\nglans\\nglary\\nglaum\\nglaur\\nglazy\\ngleba\\nglebe\\ngleby\\nglede\\ngleds\\ngleed\\ngleek\\nglees\\ngleet\\ngleis\\nglens\\nglent\\ngleys\\nglial\\nglias\\nglibs\\ngliff\\nglift\\nglike\\nglime\\nglims\\nglisk\\nglits\\nglitz\\ngloam\\nglobi\\nglobs\\ngloby\\nglode\\nglogg\\ngloms\\ngloop\\nglops\\nglost\\nglout\\nglows\\ngloze\\nglued\\ngluer\\nglues\\ngluey\\nglugs\\nglume\\nglums\\ngluon\\nglute\\ngluts\\ngnarl\\ngnarr\\ngnars\\ngnats\\ngnawn\\ngnaws\\ngnows\\ngoads\\ngoafs\\ngoals\\ngoary\\ngoats\\ngoaty\\ngoban\\ngobar\\ngobbi\\ngobbo\\ngobby\\ngobis\\ngobos\\ngodet\\ngodso\\ngoels\\ngoers\\ngoest\\ngoeth\\ngoety\\ngofer\\ngoffs\\ngogga\\ngogos\\ngoier\\ngojis\\ngolds\\ngoldy\\ngoles\\ngolfs\\ngolpe\\ngolps\\ngombo\\ngomer\\ngompa\\ngonch\\ngonef\\ngongs\\ngonia\\ngonif\\ngonks\\ngonna\\ngonof\\ngonys\\ngonzo\\ngooby\\ngoods\\ngoofs\\ngoogs\\ngooky\\ngoold\\ngools\\ngooly\\ngoons\\ngoony\\ngoops\\ngoopy\\ngoors\\ngoory\\ngoosy\\ngopak\\ngopik\\ngoral\\ngoras\\ngored\\ngores\\ngoris\\ngorms\\ngormy\\ngorps\\ngorse\\ngorsy\\ngosht\\ngosse\\ngotch\\ngoths\\ngothy\\ngotta\\ngouch\\ngouks\\ngoura\\ngouts\\ngouty\\ngowan\\ngowds\\ngowfs\\ngowks\\ngowls\\ngowns\\ngoxes\\ngoyim\\ngoyle\\ngraal\\ngrabs\\ngrads\\ngraff\\ngraip\\ngrama\\ngrame\\ngramp\\ngrams\\ngrana\\ngrans\\ngrapy\\ngravs\\ngrays\\ngrebe\\ngrebo\\ngrece\\ngreek\\ngrees\\ngrege\\ngrego\\ngrein\\ngrens\\ngrese\\ngreve\\ngrews\\ngreys\\ngrice\\ngride\\ngrids\\ngriff\\ngrift\\ngrigs\\ngrike\\ngrins\\ngriot\\ngrips\\ngript\\ngripy\\ngrise\\ngrist\\ngrisy\\ngrith\\ngrits\\ngrize\\ngroat\\ngrody\\ngrogs\\ngroks\\ngroma\\ngrone\\ngroof\\ngrosz\\ngrots\\ngrouf\\ngrovy\\ngrows\\ngrrls\\ngrrrl\\ngrubs\\ngrued\\ngrues\\ngrufe\\ngrume\\ngrump\\ngrund\\ngryce\\ngryde\\ngryke\\ngrype\\ngrypt\\nguaco\\nguana\\nguano\\nguans\\nguars\\ngucks\\ngucky\\ngudes\\nguffs\\ngugas\\nguids\\nguimp\\nguiro\\ngulag\\ngular\\ngulas\\ngules\\ngulet\\ngulfs\\ngulfy\\ngulls\\ngulph\\ngulps\\ngulpy\\ngumma\\ngummi\\ngumps\\ngundy\\ngunge\\ngungy\\ngunks\\ngunky\\ngunny\\nguqin\\ngurdy\\ngurge\\ngurls\\ngurly\\ngurns\\ngurry\\ngursh\\ngurus\\ngushy\\ngusla\\ngusle\\ngusli\\ngussy\\ngusts\\ngutsy\\ngutta\\ngutty\\nguyed\\nguyle\\nguyot\\nguyse\\ngwine\\ngyals\\ngyans\\ngybed\\ngybes\\ngyeld\\ngymps\\ngynae\\ngynie\\ngynny\\ngynos\\ngyoza\\ngypos\\ngyppo\\ngyppy\\ngyral\\ngyred\\ngyres\\ngyron\\ngyros\\ngyrus\\ngytes\\ngyved\\ngyves\\nhaafs\\nhaars\\nhable\\nhabus\\nhacek\\nhacks\\nhadal\\nhaded\\nhades\\nhadji\\nhadst\\nhaems\\nhaets\\nhaffs\\nhafiz\\nhafts\\nhaggs\\nhahas\\nhaick\\nhaika\\nhaiks\\nhaiku\\nhails\\nhaily\\nhains\\nhaint\\nhairs\\nhaith\\nhajes\\nhajis\\nhajji\\nhakam\\nhakas\\nhakea\\nhakes\\nhakim\\nhakus\\nhalal\\nhaled\\nhaler\\nhales\\nhalfa\\nhalfs\\nhalid\\nhallo\\nhalls\\nhalma\\nhalms\\nhalon\\nhalos\\nhalse\\nhalts\\nhalva\\nhalwa\\nhamal\\nhamba\\nhamed\\nhames\\nhammy\\nhamza\\nhanap\\nhance\\nhanch\\nhands\\nhangi\\nhangs\\nhanks\\nhanky\\nhansa\\nhanse\\nhants\\nhaole\\nhaoma\\nhapax\\nhaply\\nhappi\\nhapus\\nharam\\nhards\\nhared\\nhares\\nharim\\nharks\\nharls\\nharms\\nharns\\nharos\\nharps\\nharts\\nhashy\\nhasks\\nhasps\\nhasta\\nhated\\nhates\\nhatha\\nhauds\\nhaufs\\nhaugh\\nhauld\\nhaulm\\nhauls\\nhault\\nhauns\\nhause\\nhaver\\nhaves\\nhawed\\nhawks\\nhawms\\nhawse\\nhayed\\nhayer\\nhayey\\nhayle\\nhazan\\nhazed\\nhazer\\nhazes\\nheads\\nheald\\nheals\\nheame\\nheaps\\nheapy\\nheare\\nhears\\nheast\\nheats\\nheben\\nhebes\\nhecht\\nhecks\\nheder\\nhedgy\\nheeds\\nheedy\\nheels\\nheeze\\nhefte\\nhefts\\nheids\\nheigh\\nheils\\nheirs\\nhejab\\nhejra\\nheled\\nheles\\nhelio\\nhells\\nhelms\\nhelos\\nhelot\\nhelps\\nhelve\\nhemal\\nhemes\\nhemic\\nhemin\\nhemps\\nhempy\\nhench\\nhends\\nhenge\\nhenna\\nhenny\\nhenry\\nhents\\nhepar\\nherbs\\nherby\\nherds\\nheres\\nherls\\nherma\\nherms\\nherns\\nheros\\nherry\\nherse\\nhertz\\nherye\\nhesps\\nhests\\nhetes\\nheths\\nheuch\\nheugh\\nhevea\\nhewed\\nhewer\\nhewgh\\nhexad\\nhexed\\nhexer\\nhexes\\nhexyl\\nheyed\\nhiant\\nhicks\\nhided\\nhider\\nhides\\nhiems\\nhighs\\nhight\\nhijab\\nhijra\\nhiked\\nhiker\\nhikes\\nhikoi\\nhilar\\nhilch\\nhillo\\nhills\\nhilts\\nhilum\\nhilus\\nhimbo\\nhinau\\nhinds\\nhings\\nhinky\\nhinny\\nhints\\nhiois\\nhiply\\nhired\\nhiree\\nhirer\\nhires\\nhissy\\nhists\\nhithe\\nhived\\nhiver\\nhives\\nhizen\\nhoaed\\nhoagy\\nhoars\\nhoary\\nhoast\\nhobos\\nhocks\\nhocus\\nhodad\\nhodja\\nhoers\\nhogan\\nhogen\\nhoggs\\nhoghs\\nhohed\\nhoick\\nhoied\\nhoiks\\nhoing\\nhoise\\nhokas\\nhoked\\nhokes\\nhokey\\nhokis\\nhokku\\nhokum\\nholds\\nholed\\nholes\\nholey\\nholks\\nholla\\nhollo\\nholme\\nholms\\nholon\\nholos\\nholts\\nhomas\\nhomed\\nhomes\\nhomey\\nhomie\\nhomme\\nhonan\\nhonda\\nhonds\\nhoned\\nhoner\\nhones\\nhongi\\nhongs\\nhonks\\nhonky\\nhooch\\nhoods\\nhoody\\nhooey\\nhoofs\\nhooka\\nhooks\\nhooky\\nhooly\\nhoons\\nhoops\\nhoord\\nhoors\\nhoosh\\nhoots\\nhooty\\nhoove\\nhopak\\nhoped\\nhoper\\nhopes\\nhoppy\\nhorah\\nhoral\\nhoras\\nhoris\\nhorks\\nhorme\\nhorns\\nhorst\\nhorsy\\nhosed\\nhosel\\nhosen\\nhoser\\nhoses\\nhosey\\nhosta\\nhosts\\nhotch\\nhoten\\nhotty\\nhouff\\nhoufs\\nhough\\nhouri\\nhours\\nhouts\\nhovea\\nhoved\\nhoven\\nhoves\\nhowbe\\nhowes\\nhowff\\nhowfs\\nhowks\\nhowls\\nhowre\\nhowso\\nhoxed\\nhoxes\\nhoyas\\nhoyed\\nhoyle\\nhubby\\nhucks\\nhudna\\nhudud\\nhuers\\nhuffs\\nhuffy\\nhuger\\nhuggy\\nhuhus\\nhuias\\nhulas\\nhules\\nhulks\\nhulky\\nhullo\\nhulls\\nhully\\nhumas\\nhumfs\\nhumic\\nhumps\\nhumpy\\nhunks\\nhunts\\nhurds\\nhurls\\nhurly\\nhurra\\nhurst\\nhurts\\nhushy\\nhusks\\nhusos\\nhutia\\nhuzza\\nhuzzy\\nhwyls\\nhydra\\nhyens\\nhygge\\nhying\\nhykes\\nhylas\\nhyleg\\nhyles\\nhylic\\nhymns\\nhynde\\nhyoid\\nhyped\\nhypes\\nhypha\\nhyphy\\nhypos\\nhyrax\\nhyson\\nhythe\\niambi\\niambs\\nibrik\\nicers\\niched\\niches\\nichor\\nicier\\nicker\\nickle\\nicons\\nictal\\nictic\\nictus\\nidant\\nideas\\nidees\\nident\\nidled\\nidles\\nidola\\nidols\\nidyls\\niftar\\nigapo\\nigged\\niglus\\nihram\\nikans\\nikats\\nikons\\nileac\\nileal\\nileum\\nileus\\niliad\\nilial\\nilium\\niller\\nillth\\nimago\\nimams\\nimari\\nimaum\\nimbar\\nimbed\\nimide\\nimido\\nimids\\nimine\\nimino\\nimmew\\nimmit\\nimmix\\nimped\\nimpis\\nimpot\\nimpro\\nimshi\\nimshy\\ninapt\\ninarm\\ninbye\\nincel\\nincle\\nincog\\nincus\\nincut\\nindew\\nindia\\nindie\\nindol\\nindow\\nindri\\nindue\\ninerm\\ninfix\\ninfos\\ninfra\\ningan\\ningle\\ninion\\ninked\\ninker\\ninkle\\ninned\\ninnit\\ninorb\\ninrun\\ninset\\ninspo\\nintel\\nintil\\nintis\\nintra\\ninula\\ninure\\ninurn\\ninust\\ninvar\\ninwit\\niodic\\niodid\\niodin\\niotas\\nippon\\nirade\\nirids\\niring\\nirked\\niroko\\nirone\\nirons\\nisbas\\nishes\\nisled\\nisles\\nisnae\\nissei\\nistle\\nitems\\nither\\nivied\\nivies\\nixias\\nixnay\\nixora\\nixtle\\nizard\\nizars\\nizzat\\njaaps\\njabot\\njacal\\njacks\\njacky\\njaded\\njades\\njafas\\njaffa\\njagas\\njager\\njaggs\\njaggy\\njagir\\njagra\\njails\\njaker\\njakes\\njakey\\njalap\\njalop\\njambe\\njambo\\njambs\\njambu\\njames\\njammy\\njamon\\njanes\\njanns\\njanny\\njanty\\njapan\\njaped\\njaper\\njapes\\njarks\\njarls\\njarps\\njarta\\njarul\\njasey\\njaspe\\njasps\\njatos\\njauks\\njaups\\njavas\\njavel\\njawan\\njawed\\njaxie\\njeans\\njeats\\njebel\\njedis\\njeels\\njeely\\njeeps\\njeers\\njeeze\\njefes\\njeffs\\njehad\\njehus\\njelab\\njello\\njells\\njembe\\njemmy\\njenny\\njeons\\njerid\\njerks\\njerry\\njesse\\njests\\njesus\\njetes\\njeton\\njeune\\njewed\\njewie\\njhala\\njiaos\\njibba\\njibbs\\njibed\\njiber\\njibes\\njiffs\\njiggy\\njigot\\njihad\\njills\\njilts\\njimmy\\njimpy\\njingo\\njinks\\njinne\\njinni\\njinns\\njirds\\njirga\\njirre\\njisms\\njived\\njiver\\njives\\njivey\\njnana\\njobed\\njobes\\njocko\\njocks\\njocky\\njocos\\njodel\\njoeys\\njohns\\njoins\\njoked\\njokes\\njokey\\njokol\\njoled\\njoles\\njolls\\njolts\\njolty\\njomon\\njomos\\njones\\njongs\\njonty\\njooks\\njoram\\njorum\\njotas\\njotty\\njotun\\njoual\\njougs\\njouks\\njoule\\njours\\njowar\\njowed\\njowls\\njowly\\njoyed\\njubas\\njubes\\njucos\\njudas\\njudgy\\njudos\\njugal\\njugum\\njujus\\njuked\\njukes\\njukus\\njulep\\njumar\\njumby\\njumps\\njunco\\njunks\\njunky\\njupes\\njupon\\njural\\njurat\\njurel\\njures\\njusts\\njutes\\njutty\\njuves\\njuvie\\nkaama\\nkabab\\nkabar\\nkabob\\nkacha\\nkacks\\nkadai\\nkades\\nkadis\\nkafir\\nkagos\\nkagus\\nkahal\\nkaiak\\nkaids\\nkaies\\nkaifs\\nkaika\\nkaiks\\nkails\\nkaims\\nkaing\\nkains\\nkakas\\nkakis\\nkalam\\nkales\\nkalif\\nkalis\\nkalpa\\nkamas\\nkames\\nkamik\\nkamis\\nkamme\\nkanae\\nkanas\\nkandy\\nkaneh\\nkanes\\nkanga\\nkangs\\nkanji\\nkants\\nkanzu\\nkaons\\nkapas\\nkaphs\\nkapok\\nkapow\\nkapus\\nkaput\\nkaras\\nkarat\\nkarks\\nkarns\\nkaroo\\nkaros\\nkarri\\nkarst\\nkarsy\\nkarts\\nkarzy\\nkasha\\nkasme\\nkatal\\nkatas\\nkatis\\nkatti\\nkaugh\\nkauri\\nkauru\\nkaury\\nkaval\\nkavas\\nkawas\\nkawau\\nkawed\\nkayle\\nkayos\\nkazis\\nkazoo\\nkbars\\nkebar\\nkebob\\nkecks\\nkedge\\nkedgy\\nkeech\\nkeefs\\nkeeks\\nkeels\\nkeema\\nkeeno\\nkeens\\nkeeps\\nkeets\\nkeeve\\nkefir\\nkehua\\nkeirs\\nkelep\\nkelim\\nkells\\nkelly\\nkelps\\nkelpy\\nkelts\\nkelty\\nkembo\\nkembs\\nkemps\\nkempt\\nkempy\\nkenaf\\nkench\\nkendo\\nkenos\\nkente\\nkents\\nkepis\\nkerbs\\nkerel\\nkerfs\\nkerky\\nkerma\\nkerne\\nkerns\\nkeros\\nkerry\\nkerve\\nkesar\\nkests\\nketas\\nketch\\nketes\\nketol\\nkevel\\nkevil\\nkexes\\nkeyed\\nkeyer\\nkhadi\\nkhafs\\nkhans\\nkhaph\\nkhats\\nkhaya\\nkhazi\\nkheda\\nkheth\\nkhets\\nkhoja\\nkhors\\nkhoum\\nkhuds\\nkiaat\\nkiack\\nkiang\\nkibbe\\nkibbi\\nkibei\\nkibes\\nkibla\\nkicks\\nkicky\\nkiddo\\nkiddy\\nkidel\\nkidge\\nkiefs\\nkiers\\nkieve\\nkievs\\nkight\\nkikoi\\nkiley\\nkilim\\nkills\\nkilns\\nkilos\\nkilps\\nkilts\\nkilty\\nkimbo\\nkinas\\nkinda\\nkinds\\nkindy\\nkines\\nkings\\nkinin\\nkinks\\nkinos\\nkiore\\nkipes\\nkippa\\nkipps\\nkirby\\nkirks\\nkirns\\nkirri\\nkisan\\nkissy\\nkists\\nkited\\nkiter\\nkites\\nkithe\\nkiths\\nkitul\\nkivas\\nkiwis\\nklang\\nklaps\\nklett\\nklick\\nklieg\\nkliks\\nklong\\nkloof\\nkluge\\nklutz\\nknags\\nknaps\\nknarl\\nknars\\nknaur\\nknawe\\nknees\\nknell\\nknish\\nknits\\nknive\\nknobs\\nknops\\nknosp\\nknots\\nknout\\nknowe\\nknows\\nknubs\\nknurl\\nknurr\\nknurs\\nknuts\\nkoans\\nkoaps\\nkoban\\nkobos\\nkoels\\nkoffs\\nkofta\\nkogal\\nkohas\\nkohen\\nkohls\\nkoine\\nkojis\\nkokam\\nkokas\\nkoker\\nkokra\\nkokum\\nkolas\\nkolos\\nkombu\\nkonbu\\nkondo\\nkonks\\nkooks\\nkooky\\nkoori\\nkopek\\nkophs\\nkopje\\nkoppa\\nkorai\\nkoras\\nkorat\\nkores\\nkorma\\nkoros\\nkorun\\nkorus\\nkoses\\nkotch\\nkotos\\nkotow\\nkoura\\nkraal\\nkrabs\\nkraft\\nkrais\\nkrait\\nkrang\\nkrans\\nkranz\\nkraut\\nkrays\\nkreep\\nkreng\\nkrewe\\nkrona\\nkrone\\nkroon\\nkrubi\\nkrunk\\nksars\\nkubie\\nkudos\\nkudus\\nkudzu\\nkufis\\nkugel\\nkuias\\nkukri\\nkukus\\nkulak\\nkulan\\nkulas\\nkulfi\\nkumis\\nkumys\\nkuris\\nkurre\\nkurta\\nkurus\\nkusso\\nkutas\\nkutch\\nkutis\\nkutus\\nkuzus\\nkvass\\nkvell\\nkwela\\nkyack\\nkyaks\\nkyang\\nkyars\\nkyats\\nkybos\\nkydst\\nkyles\\nkylie\\nkylin\\nkylix\\nkyloe\\nkynde\\nkynds\\nkypes\\nkyrie\\nkytes\\nkythe\\nlaari\\nlabda\\nlabia\\nlabis\\nlabra\\nlaced\\nlacer\\nlaces\\nlacet\\nlacey\\nlacks\\nladdy\\nladed\\nlader\\nlades\\nlaers\\nlaevo\\nlagan\\nlahal\\nlahar\\nlaich\\nlaics\\nlaids\\nlaigh\\nlaika\\nlaiks\\nlaird\\nlairs\\nlairy\\nlaith\\nlaity\\nlaked\\nlaker\\nlakes\\nlakhs\\nlakin\\nlaksa\\nlaldy\\nlalls\\nlamas\\nlambs\\nlamby\\nlamed\\nlamer\\nlames\\nlamia\\nlammy\\nlamps\\nlanai\\nlanas\\nlanch\\nlande\\nlands\\nlanes\\nlanks\\nlants\\nlapin\\nlapis\\nlapje\\nlarch\\nlards\\nlardy\\nlaree\\nlares\\nlargo\\nlaris\\nlarks\\nlarky\\nlarns\\nlarnt\\nlarum\\nlased\\nlaser\\nlases\\nlassi\\nlassu\\nlassy\\nlasts\\nlatah\\nlated\\nlaten\\nlatex\\nlathi\\nlaths\\nlathy\\nlatke\\nlatus\\nlauan\\nlauch\\nlauds\\nlaufs\\nlaund\\nlaura\\nlaval\\nlavas\\nlaved\\nlaver\\nlaves\\nlavra\\nlavvy\\nlawed\\nlawer\\nlawin\\nlawks\\nlawns\\nlawny\\nlaxed\\nlaxer\\nlaxes\\nlaxly\\nlayed\\nlayin\\nlayup\\nlazar\\nlazed\\nlazes\\nlazos\\nlazzi\\nlazzo\\nleads\\nleady\\nleafs\\nleaks\\nleams\\nleans\\nleany\\nleaps\\nleare\\nlears\\nleary\\nleats\\nleavy\\nleaze\\nleben\\nleccy\\nledes\\nledgy\\nledum\\nleear\\nleeks\\nleeps\\nleers\\nleese\\nleets\\nleeze\\nlefte\\nlefts\\nleger\\nleges\\nlegge\\nleggo\\nlegit\\nlehrs\\nlehua\\nleirs\\nleish\\nleman\\nlemed\\nlemel\\nlemes\\nlemma\\nlemme\\nlends\\nlenes\\nlengs\\nlenis\\nlenos\\nlense\\nlenti\\nlento\\nleone\\nlepid\\nlepra\\nlepta\\nlered\\nleres\\nlerps\\nleses\\nlests\\nletch\\nlethe\\nletup\\nleuch\\nleuco\\nleuds\\nleugh\\nlevas\\nlevee\\nleves\\nlevin\\nlevis\\nlewis\\nlexes\\nlexis\\nlezes\\nlezza\\nlezzy\\nliana\\nliane\\nliang\\nliard\\nliars\\nliart\\nliber\\nlibra\\nlibri\\nlichi\\nlicht\\nlicit\\nlicks\\nlidar\\nlidos\\nliefs\\nliens\\nliers\\nlieus\\nlieve\\nlifer\\nlifes\\nlifts\\nligan\\nliger\\nligge\\nligne\\nliked\\nliker\\nlikes\\nlikin\\nlills\\nlilos\\nlilts\\nliman\\nlimas\\nlimax\\nlimba\\nlimbi\\nlimbs\\nlimby\\nlimed\\nlimen\\nlimes\\nlimey\\nlimma\\nlimns\\nlimos\\nlimpa\\nlimps\\nlinac\\nlinch\\nlinds\\nlindy\\nlined\\nlines\\nliney\\nlinga\\nlings\\nlingy\\nlinin\\nlinks\\nlinky\\nlinns\\nlinny\\nlinos\\nlints\\nlinty\\nlinum\\nlinux\\nlions\\nlipas\\nlipes\\nlipin\\nlipos\\nlippy\\nliras\\nlirks\\nlirot\\nlisks\\nlisle\\nlisps\\nlists\\nlitai\\nlitas\\nlited\\nliter\\nlites\\nlitho\\nliths\\nlitre\\nlived\\nliven\\nlives\\nlivor\\nlivre\\nllano\\nloach\\nloads\\nloafs\\nloams\\nloans\\nloast\\nloave\\nlobar\\nlobed\\nlobes\\nlobos\\nlobus\\nloche\\nlochs\\nlocie\\nlocis\\nlocks\\nlocos\\nlocum\\nloden\\nlodes\\nloess\\nlofts\\nlogan\\nloges\\nloggy\\nlogia\\nlogie\\nlogoi\\nlogon\\nlogos\\nlohan\\nloids\\nloins\\nloipe\\nloirs\\nlokes\\nlolls\\nlolly\\nlolog\\nlomas\\nlomed\\nlomes\\nloner\\nlonga\\nlonge\\nlongs\\nlooby\\nlooed\\nlooey\\nloofa\\nloofs\\nlooie\\nlooks\\nlooky\\nlooms\\nloons\\nloony\\nloops\\nloord\\nloots\\nloped\\nloper\\nlopes\\nloppy\\nloral\\nloran\\nlords\\nlordy\\nlorel\\nlores\\nloric\\nloris\\nlosed\\nlosel\\nlosen\\nloses\\nlossy\\nlotah\\nlotas\\nlotes\\nlotic\\nlotos\\nlotsa\\nlotta\\nlotte\\nlotto\\nlotus\\nloued\\nlough\\nlouie\\nlouis\\nlouma\\nlound\\nlouns\\nloupe\\nloups\\nloure\\nlours\\nloury\\nlouts\\nlovat\\nloved\\nloves\\nlovey\\nlovie\\nlowan\\nlowed\\nlowes\\nlownd\\nlowne\\nlowns\\nlowps\\nlowry\\nlowse\\nlowts\\nloxed\\nloxes\\nlozen\\nluach\\nluaus\\nlubed\\nlubes\\nlubra\\nluces\\nlucks\\nlucre\\nludes\\nludic\\nludos\\nluffa\\nluffs\\nluged\\nluger\\nluges\\nlulls\\nlulus\\nlumas\\nlumbi\\nlumme\\nlummy\\nlumps\\nlunas\\nlunes\\nlunet\\nlungi\\nlungs\\nlunks\\nlunts\\nlupin\\nlured\\nlurer\\nlures\\nlurex\\nlurgi\\nlurgy\\nlurks\\nlurry\\nlurve\\nluser\\nlushy\\nlusks\\nlusts\\nlusus\\nlutea\\nluted\\nluter\\nlutes\\nluvvy\\nluxed\\nluxer\\nluxes\\nlweis\\nlyams\\nlyard\\nlyart\\nlyase\\nlycea\\nlycee\\nlycra\\nlymes\\nlynes\\nlyres\\nlysed\\nlyses\\nlysin\\nlysis\\nlysol\\nlyssa\\nlyted\\nlytes\\nlythe\\nlytic\\nlytta\\nmaaed\\nmaare\\nmaars\\nmabes\\nmacas\\nmaced\\nmacer\\nmaces\\nmache\\nmachi\\nmachs\\nmacks\\nmacle\\nmacon\\nmadge\\nmadid\\nmadre\\nmaerl\\nmafic\\nmages\\nmaggs\\nmagot\\nmagus\\nmahoe\\nmahua\\nmahwa\\nmaids\\nmaiko\\nmaiks\\nmaile\\nmaill\\nmails\\nmaims\\nmains\\nmaire\\nmairs\\nmaise\\nmaist\\nmakar\\nmakes\\nmakis\\nmakos\\nmalam\\nmalar\\nmalas\\nmalax\\nmales\\nmalic\\nmalik\\nmalis\\nmalls\\nmalms\\nmalmy\\nmalts\\nmalty\\nmalus\\nmalva\\nmalwa\\nmamas\\nmamba\\nmamee\\nmamey\\nmamie\\nmanas\\nmanat\\nmandi\\nmaneb\\nmaned\\nmaneh\\nmanes\\nmanet\\nmangs\\nmanis\\nmanky\\nmanna\\nmanos\\nmanse\\nmanta\\nmanto\\nmanty\\nmanul\\nmanus\\nmapau\\nmaqui\\nmarae\\nmarah\\nmaras\\nmarcs\\nmardy\\nmares\\nmarge\\nmargs\\nmaria\\nmarid\\nmarka\\nmarks\\nmarle\\nmarls\\nmarly\\nmarms\\nmaron\\nmaror\\nmarra\\nmarri\\nmarse\\nmarts\\nmarvy\\nmasas\\nmased\\nmaser\\nmases\\nmashy\\nmasks\\nmassa\\nmassy\\nmasts\\nmasty\\nmasus\\nmatai\\nmated\\nmater\\nmates\\nmaths\\nmatin\\nmatlo\\nmatte\\nmatts\\nmatza\\nmatzo\\nmauby\\nmauds\\nmauls\\nmaund\\nmauri\\nmausy\\nmauts\\nmauzy\\nmaven\\nmavie\\nmavin\\nmavis\\nmawed\\nmawks\\nmawky\\nmawns\\nmawrs\\nmaxed\\nmaxes\\nmaxis\\nmayan\\nmayas\\nmayed\\nmayos\\nmayst\\nmazed\\nmazer\\nmazes\\nmazey\\nmazut\\nmbira\\nmeads\\nmeals\\nmeane\\nmeans\\nmeany\\nmeare\\nmease\\nmeath\\nmeats\\nmebos\\nmechs\\nmecks\\nmedii\\nmedle\\nmeeds\\nmeers\\nmeets\\nmeffs\\nmeins\\nmeint\\nmeiny\\nmeith\\nmekka\\nmelas\\nmelba\\nmelds\\nmelic\\nmelik\\nmells\\nmelts\\nmelty\\nmemes\\nmemos\\nmenad\\nmends\\nmened\\nmenes\\nmenge\\nmengs\\nmensa\\nmense\\nmensh\\nmenta\\nmento\\nmenus\\nmeous\\nmeows\\nmerch\\nmercs\\nmerde\\nmered\\nmerel\\nmerer\\nmeres\\nmeril\\nmeris\\nmerks\\nmerle\\nmerls\\nmerse\\nmesal\\nmesas\\nmesel\\nmeses\\nmeshy\\nmesic\\nmesne\\nmeson\\nmessy\\nmesto\\nmeted\\nmetes\\nmetho\\nmeths\\nmetic\\nmetif\\nmetis\\nmetol\\nmetre\\nmeuse\\nmeved\\nmeves\\nmewed\\nmewls\\nmeynt\\nmezes\\nmezze\\nmezzo\\nmhorr\\nmiaou\\nmiaow\\nmiasm\\nmiaul\\nmicas\\nmiche\\nmicht\\nmicks\\nmicky\\nmicos\\nmicra\\nmiddy\\nmidgy\\nmidis\\nmiens\\nmieve\\nmiffs\\nmiffy\\nmifty\\nmiggs\\nmihas\\nmihis\\nmiked\\nmikes\\nmikra\\nmikva\\nmilch\\nmilds\\nmiler\\nmiles\\nmilfs\\nmilia\\nmilko\\nmilks\\nmille\\nmills\\nmilor\\nmilos\\nmilpa\\nmilts\\nmilty\\nmiltz\\nmimed\\nmimeo\\nmimer\\nmimes\\nmimsy\\nminae\\nminar\\nminas\\nmincy\\nminds\\nmined\\nmines\\nminge\\nmings\\nmingy\\nminis\\nminke\\nminks\\nminny\\nminos\\nmints\\nmired\\nmires\\nmirex\\nmirid\\nmirin\\nmirks\\nmirky\\nmirly\\nmiros\\nmirvs\\nmirza\\nmisch\\nmisdo\\nmises\\nmisgo\\nmisos\\nmissa\\nmists\\nmisty\\nmitch\\nmiter\\nmites\\nmitis\\nmitre\\nmitts\\nmixed\\nmixen\\nmixer\\nmixes\\nmixte\\nmixup\\nmizen\\nmizzy\\nmneme\\nmoans\\nmoats\\nmobby\\nmobes\\nmobey\\nmobie\\nmoble\\nmochi\\nmochs\\nmochy\\nmocks\\nmoder\\nmodes\\nmodge\\nmodii\\nmodus\\nmoers\\nmofos\\nmoggy\\nmohel\\nmohos\\nmohrs\\nmohua\\nmohur\\nmoile\\nmoils\\nmoira\\nmoire\\nmoits\\nmojos\\nmokes\\nmokis\\nmokos\\nmolal\\nmolas\\nmolds\\nmoled\\nmoles\\nmolla\\nmolls\\nmolly\\nmolto\\nmolts\\nmolys\\nmomes\\nmomma\\nmommy\\nmomus\\nmonad\\nmonal\\nmonas\\nmonde\\nmondo\\nmoner\\nmongo\\nmongs\\nmonic\\nmonie\\nmonks\\nmonos\\nmonte\\nmonty\\nmoobs\\nmooch\\nmoods\\nmooed\\nmooks\\nmoola\\nmooli\\nmools\\nmooly\\nmoong\\nmoons\\nmoony\\nmoops\\nmoors\\nmoory\\nmoots\\nmoove\\nmoped\\nmoper\\nmopes\\nmopey\\nmoppy\\nmopsy\\nmopus\\nmorae\\nmoras\\nmorat\\nmoray\\nmorel\\nmores\\nmoria\\nmorne\\nmorns\\nmorra\\nmorro\\nmorse\\nmorts\\nmosed\\nmoses\\nmosey\\nmosks\\nmosso\\nmoste\\nmosts\\nmoted\\nmoten\\nmotes\\nmotet\\nmotey\\nmoths\\nmothy\\nmotis\\nmotte\\nmotts\\nmotty\\nmotus\\nmotza\\nmouch\\nmoues\\nmould\\nmouls\\nmoups\\nmoust\\nmousy\\nmoved\\nmoves\\nmowas\\nmowed\\nmowra\\nmoxas\\nmoxie\\nmoyas\\nmoyle\\nmoyls\\nmozed\\nmozes\\nmozos\\nmpret\\nmucho\\nmucic\\nmucid\\nmucin\\nmucks\\nmucor\\nmucro\\nmudge\\nmudir\\nmudra\\nmuffs\\nmufti\\nmugga\\nmuggs\\nmuggy\\nmuhly\\nmuids\\nmuils\\nmuirs\\nmuist\\nmujik\\nmulct\\nmuled\\nmules\\nmuley\\nmulga\\nmulie\\nmulla\\nmulls\\nmulse\\nmulsh\\nmumms\\nmumps\\nmumsy\\nmumus\\nmunga\\nmunge\\nmungo\\nmungs\\nmunis\\nmunts\\nmuntu\\nmuons\\nmuras\\nmured\\nmures\\nmurex\\nmurid\\nmurks\\nmurls\\nmurly\\nmurra\\nmurre\\nmurri\\nmurrs\\nmurry\\nmurti\\nmurva\\nmusar\\nmusca\\nmused\\nmuser\\nmuses\\nmuset\\nmusha\\nmusit\\nmusks\\nmusos\\nmusse\\nmussy\\nmusth\\nmusts\\nmutch\\nmuted\\nmuter\\nmutes\\nmutha\\nmutis\\nmuton\\nmutts\\nmuxed\\nmuxes\\nmuzak\\nmuzzy\\nmvule\\nmyall\\nmylar\\nmynah\\nmynas\\nmyoid\\nmyoma\\nmyope\\nmyops\\nmyopy\\nmysid\\nmythi\\nmyths\\nmythy\\nmyxos\\nmzees\\nnaams\\nnaans\\nnabes\\nnabis\\nnabks\\nnabla\\nnabob\\nnache\\nnacho\\nnacre\\nnadas\\nnaeve\\nnaevi\\nnaffs\\nnagas\\nnaggy\\nnagor\\nnahal\\nnaiad\\nnaifs\\nnaiks\\nnails\\nnaira\\nnairu\\nnaked\\nnaker\\nnakfa\\nnalas\\nnaled\\nnalla\\nnamed\\nnamer\\nnames\\nnamma\\nnamus\\nnanas\\nnance\\nnancy\\nnandu\\nnanna\\nnanos\\nnanua\\nnapas\\nnaped\\nnapes\\nnapoo\\nnappa\\nnappe\\nnappy\\nnaras\\nnarco\\nnarcs\\nnards\\nnares\\nnaric\\nnaris\\nnarks\\nnarky\\nnarre\\nnashi\\nnatch\\nnates\\nnatis\\nnatty\\nnauch\\nnaunt\\nnavar\\nnaves\\nnavew\\nnavvy\\nnawab\\nnazes\\nnazir\\nnazis\\nnduja\\nneafe\\nneals\\nneaps\\nnears\\nneath\\nneats\\nnebek\\nnebel\\nnecks\\nneddy\\nneeds\\nneeld\\nneele\\nneemb\\nneems\\nneeps\\nneese\\nneeze\\nnegro\\nnegus\\nneifs\\nneist\\nneive\\nnelis\\nnelly\\nnemas\\nnemns\\nnempt\\nnenes\\nneons\\nneper\\nnepit\\nneral\\nnerds\\nnerka\\nnerks\\nnerol\\nnerts\\nnertz\\nnervy\\nnests\\nnetes\\nnetop\\nnetts\\nnetty\\nneuks\\nneume\\nneums\\nnevel\\nneves\\nnevus\\nnewbs\\nnewed\\nnewel\\nnewie\\nnewsy\\nnewts\\nnexts\\nnexus\\nngaio\\nngana\\nngati\\nngoma\\nngwee\\nnicad\\nnicht\\nnicks\\nnicol\\nnidal\\nnided\\nnides\\nnidor\\nnidus\\nniefs\\nnieve\\nnifes\\nniffs\\nniffy\\nnifty\\nniger\\nnighs\\nnihil\\nnikab\\nnikah\\nnikau\\nnills\\nnimbi\\nnimbs\\nnimps\\nniner\\nnines\\nninon\\nnipas\\nnippy\\nniqab\\nnirls\\nnirly\\nnisei\\nnisse\\nnisus\\nniter\\nnites\\nnitid\\nniton\\nnitre\\nnitro\\nnitry\\nnitty\\nnival\\nnixed\\nnixer\\nnixes\\nnixie\\nnizam\\nnkosi\\nnoahs\\nnobby\\nnocks\\nnodal\\nnoddy\\nnodes\\nnodus\\nnoels\\nnoggs\\nnohow\\nnoils\\nnoily\\nnoint\\nnoirs\\nnoles\\nnolls\\nnolos\\nnomas\\nnomen\\nnomes\\nnomic\\nnomoi\\nnomos\\nnonas\\nnonce\\nnones\\nnonet\\nnongs\\nnonis\\nnonny\\nnonyl\\nnoobs\\nnooit\\nnooks\\nnooky\\nnoons\\nnoops\\nnopal\\nnoria\\nnoris\\nnorks\\nnorma\\nnorms\\nnosed\\nnoser\\nnoses\\nnotal\\nnoted\\nnoter\\nnotes\\nnotum\\nnould\\nnoule\\nnouls\\nnouns\\nnouny\\nnoups\\nnovae\\nnovas\\nnovum\\nnoway\\nnowed\\nnowls\\nnowts\\nnowty\\nnoxal\\nnoxes\\nnoyau\\nnoyed\\nnoyes\\nnubby\\nnubia\\nnucha\\nnuddy\\nnuder\\nnudes\\nnudie\\nnudzh\\nnuffs\\nnugae\\nnuked\\nnukes\\nnulla\\nnulls\\nnumbs\\nnumen\\nnummy\\nnunny\\nnurds\\nnurdy\\nnurls\\nnurrs\\nnutso\\nnutsy\\nnyaff\\nnyala\\nnying\\nnyssa\\noaked\\noaker\\noakum\\noared\\noases\\noasis\\noasts\\noaten\\noater\\noaths\\noaves\\nobang\\nobeah\\nobeli\\nobeys\\nobias\\nobied\\nobiit\\nobits\\nobjet\\noboes\\nobole\\noboli\\nobols\\noccam\\nocher\\noches\\nochre\\nochry\\nocker\\nocrea\\noctad\\noctan\\noctas\\noctyl\\noculi\\nodahs\\nodals\\nodeon\\nodeum\\nodism\\nodist\\nodium\\nodors\\nodour\\nodyle\\nodyls\\nofays\\noffed\\noffie\\noflag\\nofter\\nogams\\nogeed\\nogees\\noggin\\nogham\\nogive\\nogled\\nogler\\nogles\\nogmic\\nogres\\nohias\\nohing\\nohmic\\nohone\\noidia\\noiled\\noiler\\noinks\\noints\\nojime\\nokapi\\nokays\\nokehs\\nokras\\noktas\\noldie\\noleic\\nolein\\nolent\\noleos\\noleum\\nolios\\nollas\\nollav\\noller\\nollie\\nology\\nolpae\\nolpes\\nomasa\\nomber\\nombus\\nomens\\nomers\\nomits\\nomlah\\nomovs\\nomrah\\noncer\\nonces\\noncet\\noncus\\nonely\\noners\\nonery\\nonium\\nonkus\\nonlay\\nonned\\nontic\\noobit\\noohed\\noomph\\noonts\\nooped\\noorie\\nooses\\nootid\\noozed\\noozes\\nopahs\\nopals\\nopens\\nopepe\\noping\\noppos\\nopsin\\nopted\\nopter\\norach\\noracy\\norals\\norang\\norant\\norate\\norbed\\norcas\\norcin\\nordos\\noread\\norfes\\norgia\\norgic\\norgue\\noribi\\noriel\\norixa\\norles\\norlon\\norlop\\normer\\nornis\\norpin\\norris\\northo\\norval\\norzos\\noscar\\noshac\\nosier\\nosmic\\nosmol\\nossia\\nostia\\notaku\\notary\\nottar\\nottos\\noubit\\noucht\\nouens\\nouija\\noulks\\noumas\\noundy\\noupas\\nouped\\nouphe\\nouphs\\nourie\\nousel\\nousts\\noutby\\nouted\\noutre\\noutro\\noutta\\nouzel\\nouzos\\novals\\novels\\novens\\novers\\novist\\novoli\\novolo\\novule\\nowche\\nowies\\nowled\\nowler\\nowlet\\nowned\\nowres\\nowrie\\nowsen\\noxbow\\noxers\\noxeye\\noxids\\noxies\\noxime\\noxims\\noxlip\\noxter\\noyers\\nozeki\\nozzie\\npaals\\npaans\\npacas\\npaced\\npacer\\npaces\\npacey\\npacha\\npacks\\npacos\\npacta\\npacts\\npadis\\npadle\\npadma\\npadre\\npadri\\npaean\\npaedo\\npaeon\\npaged\\npager\\npages\\npagle\\npagod\\npagri\\npaiks\\npails\\npains\\npaire\\npairs\\npaisa\\npaise\\npakka\\npalas\\npalay\\npalea\\npaled\\npales\\npalet\\npalis\\npalki\\npalla\\npalls\\npally\\npalms\\npalmy\\npalpi\\npalps\\npalsa\\npampa\\npanax\\npance\\npanda\\npands\\npandy\\npaned\\npanes\\npanga\\npangs\\npanim\\npanko\\npanne\\npanni\\npanto\\npants\\npanty\\npaoli\\npaolo\\npapas\\npapaw\\npapes\\npappi\\npappy\\nparae\\nparas\\nparch\\npardi\\npards\\npardy\\npared\\nparen\\npareo\\npares\\npareu\\nparev\\nparge\\npargo\\nparis\\nparki\\nparks\\nparky\\nparle\\nparly\\nparma\\nparol\\nparps\\nparra\\nparrs\\nparti\\nparts\\nparve\\nparvo\\npaseo\\npases\\npasha\\npashm\\npaska\\npaspy\\npasse\\npasts\\npated\\npaten\\npater\\npates\\npaths\\npatin\\npatka\\npatly\\npatte\\npatus\\npauas\\npauls\\npavan\\npaved\\npaven\\npaver\\npaves\\npavid\\npavin\\npavis\\npawas\\npawaw\\npawed\\npawer\\npawks\\npawky\\npawls\\npawns\\npaxes\\npayed\\npayor\\npaysd\\npeage\\npeags\\npeaks\\npeaky\\npeals\\npeans\\npeare\\npears\\npeart\\npease\\npeats\\npeaty\\npeavy\\npeaze\\npebas\\npechs\\npecke\\npecks\\npecky\\npedes\\npedis\\npedro\\npeece\\npeeks\\npeels\\npeens\\npeeoy\\npeepe\\npeeps\\npeers\\npeery\\npeeve\\npeggy\\npeghs\\npeins\\npeise\\npeize\\npekan\\npekes\\npekin\\npekoe\\npelas\\npelau\\npeles\\npelfs\\npells\\npelma\\npelon\\npelta\\npelts\\npends\\npendu\\npened\\npenes\\npengo\\npenie\\npenis\\npenks\\npenna\\npenni\\npents\\npeons\\npeony\\npepla\\npepos\\npeppy\\npepsi\\nperai\\nperce\\npercs\\nperdu\\nperdy\\nperea\\nperes\\nperis\\nperks\\nperms\\nperns\\nperog\\nperps\\nperry\\nperse\\nperst\\nperts\\nperve\\npervo\\npervs\\npervy\\npesos\\npests\\npesty\\npetar\\npeter\\npetit\\npetre\\npetri\\npetti\\npetto\\npewee\\npewit\\npeyse\\nphage\\nphang\\nphare\\npharm\\npheer\\nphene\\npheon\\nphese\\nphial\\nphish\\nphizz\\nphlox\\nphoca\\nphono\\nphons\\nphots\\nphpht\\nphuts\\nphyla\\nphyle\\npiani\\npians\\npibal\\npical\\npicas\\npiccy\\npicks\\npicot\\npicra\\npicul\\npiend\\npiers\\npiert\\npieta\\npiets\\npiezo\\npight\\npigmy\\npiing\\npikas\\npikau\\npiked\\npiker\\npikes\\npikey\\npikis\\npikul\\npilae\\npilaf\\npilao\\npilar\\npilau\\npilaw\\npilch\\npilea\\npiled\\npilei\\npiler\\npiles\\npilis\\npills\\npilow\\npilum\\npilus\\npimas\\npimps\\npinas\\npined\\npines\\npingo\\npings\\npinko\\npinks\\npinna\\npinny\\npinon\\npinot\\npinta\\npints\\npinup\\npions\\npiony\\npious\\npioye\\npioys\\npipal\\npipas\\npiped\\npipes\\npipet\\npipis\\npipit\\npippy\\npipul\\npirai\\npirls\\npirns\\npirog\\npisco\\npises\\npisky\\npisos\\npissy\\npiste\\npitas\\npiths\\npiton\\npitot\\npitta\\npiums\\npixes\\npized\\npizes\\nplaas\\nplack\\nplage\\nplans\\nplaps\\nplash\\nplasm\\nplast\\nplats\\nplatt\\nplaty\\nplaya\\nplays\\npleas\\nplebe\\nplebs\\nplena\\npleon\\nplesh\\nplews\\nplica\\nplies\\nplims\\npling\\nplink\\nploat\\nplods\\nplong\\nplonk\\nplook\\nplops\\nplots\\nplotz\\nplouk\\nplows\\nploye\\nploys\\nplues\\npluff\\nplugs\\nplums\\nplumy\\npluot\\npluto\\nplyer\\npoach\\npoaka\\npoake\\npoboy\\npocks\\npocky\\npodal\\npoddy\\npodex\\npodge\\npodgy\\npodia\\npoems\\npoeps\\npoets\\npogey\\npogge\\npogos\\npohed\\npoilu\\npoind\\npokal\\npoked\\npokes\\npokey\\npokie\\npoled\\npoler\\npoles\\npoley\\npolio\\npolis\\npolje\\npolks\\npolls\\npolly\\npolos\\npolts\\npolys\\npombe\\npomes\\npommy\\npomos\\npomps\\nponce\\nponcy\\nponds\\npones\\nponey\\nponga\\npongo\\npongs\\npongy\\nponks\\nponts\\nponty\\nponzu\\npoods\\npooed\\npoofs\\npoofy\\npoohs\\npooja\\npooka\\npooks\\npools\\npoons\\npoops\\npoopy\\npoori\\npoort\\npoots\\npoove\\npoovy\\npopes\\npoppa\\npopsy\\nporae\\nporal\\npored\\nporer\\npores\\nporge\\nporgy\\nporin\\nporks\\nporky\\nporno\\nporns\\nporny\\nporta\\nports\\nporty\\nposed\\nposes\\nposey\\nposho\\nposts\\npotae\\npotch\\npoted\\npotes\\npotin\\npotoo\\npotsy\\npotto\\npotts\\npotty\\npouff\\npoufs\\npouke\\npouks\\npoule\\npoulp\\npoult\\npoupe\\npoupt\\npours\\npouts\\npowan\\npowin\\npownd\\npowns\\npowny\\npowre\\npoxed\\npoxes\\npoynt\\npoyou\\npoyse\\npozzy\\npraam\\nprads\\nprahu\\nprams\\nprana\\nprang\\npraos\\nprase\\nprate\\nprats\\npratt\\npraty\\npraus\\nprays\\npredy\\npreed\\nprees\\npreif\\nprems\\npremy\\nprent\\npreon\\npreop\\npreps\\npresa\\nprese\\nprest\\npreve\\nprexy\\npreys\\nprial\\npricy\\nprief\\nprier\\npries\\nprigs\\nprill\\nprima\\nprimi\\nprimp\\nprims\\nprimy\\nprink\\nprion\\nprise\\npriss\\nproas\\nprobs\\nprods\\nproem\\nprofs\\nprogs\\nproin\\nproke\\nprole\\nproll\\npromo\\nproms\\npronk\\nprops\\nprore\\nproso\\npross\\nprost\\nprosy\\nproto\\nproul\\nprows\\nproyn\\nprunt\\npruta\\npryer\\npryse\\npseud\\npshaw\\npsion\\npsoae\\npsoai\\npsoas\\npsora\\npsych\\npsyop\\npubco\\npubes\\npubis\\npucan\\npucer\\npuces\\npucka\\npucks\\npuddy\\npudge\\npudic\\npudor\\npudsy\\npudus\\npuers\\npuffa\\npuffs\\npuggy\\npugil\\npuhas\\npujah\\npujas\\npukas\\npuked\\npuker\\npukes\\npukey\\npukka\\npukus\\npulao\\npulas\\npuled\\npuler\\npules\\npulik\\npulis\\npulka\\npulks\\npulli\\npulls\\npully\\npulmo\\npulps\\npulus\\npumas\\npumie\\npumps\\npunas\\npunce\\npunga\\npungs\\npunji\\npunka\\npunks\\npunky\\npunny\\npunto\\npunts\\npunty\\npupae\\npupas\\npupus\\npurda\\npured\\npures\\npurin\\npuris\\npurls\\npurpy\\npurrs\\npursy\\npurty\\npuses\\npusle\\nputid\\nputon\\nputti\\nputto\\nputts\\npuzel\\npwned\\npyats\\npyets\\npygal\\npyins\\npylon\\npyned\\npynes\\npyoid\\npyots\\npyral\\npyran\\npyres\\npyrex\\npyric\\npyros\\npyxed\\npyxes\\npyxie\\npyxis\\npzazz\\nqadis\\nqaids\\nqajaq\\nqanat\\nqapik\\nqibla\\nqophs\\nqorma\\nquads\\nquaff\\nquags\\nquair\\nquais\\nquaky\\nquale\\nquant\\nquare\\nquass\\nquate\\nquats\\nquayd\\nquays\\nqubit\\nquean\\nqueme\\nquena\\nquern\\nqueyn\\nqueys\\nquich\\nquids\\nquiff\\nquims\\nquina\\nquine\\nquino\\nquins\\nquint\\nquipo\\nquips\\nquipu\\nquire\\nquirt\\nquist\\nquits\\nquoad\\nquods\\nquoif\\nquoin\\nquoit\\nquoll\\nquonk\\nquops\\nqursh\\nquyte\\nrabat\\nrabic\\nrabis\\nraced\\nraces\\nrache\\nracks\\nracon\\nradge\\nradix\\nradon\\nraffs\\nrafts\\nragas\\nragde\\nraged\\nragee\\nrager\\nrages\\nragga\\nraggs\\nraggy\\nragis\\nragus\\nrahed\\nrahui\\nraias\\nraids\\nraiks\\nraile\\nrails\\nraine\\nrains\\nraird\\nraita\\nraits\\nrajas\\nrajes\\nraked\\nrakee\\nraker\\nrakes\\nrakia\\nrakis\\nrakus\\nrales\\nramal\\nramee\\nramet\\nramie\\nramin\\nramis\\nrammy\\nramps\\nramus\\nranas\\nrance\\nrands\\nranee\\nranga\\nrangi\\nrangs\\nrangy\\nranid\\nranis\\nranke\\nranks\\nrants\\nraped\\nraper\\nrapes\\nraphe\\nrappe\\nrared\\nraree\\nrares\\nrarks\\nrased\\nraser\\nrases\\nrasps\\nrasse\\nrasta\\nratal\\nratan\\nratas\\nratch\\nrated\\nratel\\nrater\\nrates\\nratha\\nrathe\\nraths\\nratoo\\nratos\\nratus\\nrauns\\nraupo\\nraved\\nravel\\nraver\\nraves\\nravey\\nravin\\nrawer\\nrawin\\nrawly\\nrawns\\nraxed\\nraxes\\nrayah\\nrayas\\nrayed\\nrayle\\nrayne\\nrazed\\nrazee\\nrazer\\nrazes\\nrazoo\\nreadd\\nreads\\nreais\\nreaks\\nrealo\\nreals\\nreame\\nreams\\nreamy\\nreans\\nreaps\\nrears\\nreast\\nreata\\nreate\\nreave\\nrebbe\\nrebec\\nrebid\\nrebit\\nrebop\\nrebuy\\nrecal\\nrecce\\nrecco\\nreccy\\nrecit\\nrecks\\nrecon\\nrecta\\nrecti\\nrecto\\nredan\\nredds\\nreddy\\nreded\\nredes\\nredia\\nredid\\nredip\\nredly\\nredon\\nredos\\nredox\\nredry\\nredub\\nredux\\nredye\\nreech\\nreede\\nreeds\\nreefs\\nreefy\\nreeks\\nreeky\\nreels\\nreens\\nreest\\nreeve\\nrefed\\nrefel\\nreffo\\nrefis\\nrefix\\nrefly\\nrefry\\nregar\\nreges\\nreggo\\nregie\\nregma\\nregna\\nregos\\nregur\\nrehem\\nreifs\\nreify\\nreiki\\nreiks\\nreink\\nreins\\nreird\\nreist\\nreive\\nrejig\\nrejon\\nreked\\nrekes\\nrekey\\nrelet\\nrelie\\nrelit\\nrello\\nreman\\nremap\\nremen\\nremet\\nremex\\nremix\\nrenay\\nrends\\nreney\\nrenga\\nrenig\\nrenin\\nrenne\\nrenos\\nrente\\nrents\\nreoil\\nreorg\\nrepeg\\nrepin\\nrepla\\nrepos\\nrepot\\nrepps\\nrepro\\nreran\\nrerig\\nresat\\nresaw\\nresay\\nresee\\nreses\\nresew\\nresid\\nresit\\nresod\\nresow\\nresto\\nrests\\nresty\\nresus\\nretag\\nretax\\nretem\\nretia\\nretie\\nretox\\nrevet\\nrevie\\nrewan\\nrewax\\nrewed\\nrewet\\nrewin\\nrewon\\nrewth\\nrexes\\nrezes\\nrheas\\nrheme\\nrheum\\nrhies\\nrhime\\nrhine\\nrhody\\nrhomb\\nrhone\\nrhumb\\nrhyne\\nrhyta\\nriads\\nrials\\nriant\\nriata\\nribas\\nribby\\nribes\\nriced\\nricer\\nrices\\nricey\\nricht\\nricin\\nricks\\nrides\\nridgy\\nridic\\nriels\\nriems\\nrieve\\nrifer\\nriffs\\nrifte\\nrifts\\nrifty\\nriggs\\nrigol\\nriled\\nriles\\nriley\\nrille\\nrills\\nrimae\\nrimed\\nrimer\\nrimes\\nrimus\\nrinds\\nrindy\\nrines\\nrings\\nrinks\\nrioja\\nriots\\nriped\\nripes\\nripps\\nrises\\nrishi\\nrisks\\nrisps\\nrisus\\nrites\\nritts\\nritzy\\nrivas\\nrived\\nrivel\\nriven\\nrives\\nriyal\\nrizas\\nroads\\nroams\\nroans\\nroars\\nroary\\nroate\\nrobed\\nrobes\\nroble\\nrocks\\nroded\\nrodes\\nroguy\\nrohes\\nroids\\nroils\\nroily\\nroins\\nroist\\nrojak\\nrojis\\nroked\\nroker\\nrokes\\nrolag\\nroles\\nrolfs\\nrolls\\nromal\\nroman\\nromeo\\nromps\\nronde\\nrondo\\nroneo\\nrones\\nronin\\nronne\\nronte\\nronts\\nroods\\nroofs\\nroofy\\nrooks\\nrooky\\nrooms\\nroons\\nroops\\nroopy\\nroosa\\nroose\\nroots\\nrooty\\nroped\\nroper\\nropes\\nropey\\nroque\\nroral\\nrores\\nroric\\nrorid\\nrorie\\nrorts\\nrorty\\nrosed\\nroses\\nroset\\nroshi\\nrosin\\nrosit\\nrosti\\nrosts\\nrotal\\nrotan\\nrotas\\nrotch\\nroted\\nrotes\\nrotis\\nrotls\\nroton\\nrotos\\nrotte\\nrouen\\nroues\\nroule\\nrouls\\nroums\\nroups\\nroupy\\nroust\\nrouth\\nrouts\\nroved\\nroven\\nroves\\nrowan\\nrowed\\nrowel\\nrowen\\nrowie\\nrowme\\nrownd\\nrowth\\nrowts\\nroyne\\nroyst\\nrozet\\nrozit\\nruana\\nrubai\\nrubby\\nrubel\\nrubes\\nrubin\\nruble\\nrubli\\nrubus\\nruche\\nrucks\\nrudas\\nrudds\\nrudes\\nrudie\\nrudis\\nrueda\\nruers\\nruffe\\nruffs\\nrugae\\nrugal\\nruggy\\nruing\\nruins\\nrukhs\\nruled\\nrules\\nrumal\\nrumbo\\nrumen\\nrumes\\nrumly\\nrummy\\nrumpo\\nrumps\\nrumpy\\nrunch\\nrunds\\nruned\\nrunes\\nrungs\\nrunic\\nrunny\\nrunts\\nrunty\\nrupia\\nrurps\\nrurus\\nrusas\\nruses\\nrushy\\nrusks\\nrusma\\nrusse\\nrusts\\nruths\\nrutin\\nrutty\\nryals\\nrybat\\nryked\\nrykes\\nrymme\\nrynds\\nryots\\nryper\\nsaags\\nsabal\\nsabed\\nsaber\\nsabes\\nsabha\\nsabin\\nsabir\\nsable\\nsabot\\nsabra\\nsabre\\nsacks\\nsacra\\nsaddo\\nsades\\nsadhe\\nsadhu\\nsadis\\nsados\\nsadza\\nsafed\\nsafes\\nsagas\\nsager\\nsages\\nsaggy\\nsagos\\nsagum\\nsaheb\\nsahib\\nsaice\\nsaick\\nsaics\\nsaids\\nsaiga\\nsails\\nsaims\\nsaine\\nsains\\nsairs\\nsaist\\nsaith\\nsajou\\nsakai\\nsaker\\nsakes\\nsakia\\nsakis\\nsakti\\nsalal\\nsalat\\nsalep\\nsales\\nsalet\\nsalic\\nsalix\\nsalle\\nsalmi\\nsalol\\nsalop\\nsalpa\\nsalps\\nsalse\\nsalto\\nsalts\\nsalue\\nsalut\\nsaman\\nsamas\\nsamba\\nsambo\\nsamek\\nsamel\\nsamen\\nsames\\nsamey\\nsamfu\\nsammy\\nsampi\\nsamps\\nsands\\nsaned\\nsanes\\nsanga\\nsangh\\nsango\\nsangs\\nsanko\\nsansa\\nsanto\\nsants\\nsaola\\nsapan\\nsapid\\nsapor\\nsaran\\nsards\\nsared\\nsaree\\nsarge\\nsargo\\nsarin\\nsaris\\nsarks\\nsarky\\nsarod\\nsaros\\nsarus\\nsaser\\nsasin\\nsasse\\nsatai\\nsatay\\nsated\\nsatem\\nsates\\nsatis\\nsauba\\nsauch\\nsaugh\\nsauls\\nsault\\nsaunt\\nsaury\\nsauts\\nsaved\\nsaver\\nsaves\\nsavey\\nsavin\\nsawah\\nsawed\\nsawer\\nsaxes\\nsayed\\nsayer\\nsayid\\nsayne\\nsayon\\nsayst\\nsazes\\nscabs\\nscads\\nscaff\\nscags\\nscail\\nscala\\nscall\\nscams\\nscand\\nscans\\nscapa\\nscape\\nscapi\\nscarp\\nscars\\nscart\\nscath\\nscats\\nscatt\\nscaud\\nscaup\\nscaur\\nscaws\\nsceat\\nscena\\nscend\\nschav\\nschmo\\nschul\\nschwa\\nsclim\\nscody\\nscogs\\nscoog\\nscoot\\nscopa\\nscops\\nscots\\nscoug\\nscoup\\nscowp\\nscows\\nscrab\\nscrae\\nscrag\\nscran\\nscrat\\nscraw\\nscray\\nscrim\\nscrip\\nscrob\\nscrod\\nscrog\\nscrow\\nscudi\\nscudo\\nscuds\\nscuff\\nscuft\\nscugs\\nsculk\\nscull\\nsculp\\nsculs\\nscums\\nscups\\nscurf\\nscurs\\nscuse\\nscuta\\nscute\\nscuts\\nscuzz\\nscyes\\nsdayn\\nsdein\\nseals\\nseame\\nseams\\nseamy\\nseans\\nseare\\nsears\\nsease\\nseats\\nseaze\\nsebum\\nsecco\\nsechs\\nsects\\nseder\\nsedes\\nsedge\\nsedgy\\nsedum\\nseeds\\nseeks\\nseeld\\nseels\\nseely\\nseems\\nseeps\\nseepy\\nseers\\nsefer\\nsegar\\nsegni\\nsegno\\nsegol\\nsegos\\nsehri\\nseifs\\nseils\\nseine\\nseirs\\nseise\\nseism\\nseity\\nseiza\\nsekos\\nsekts\\nselah\\nseles\\nselfs\\nsella\\nselle\\nsells\\nselva\\nsemee\\nsemes\\nsemie\\nsemis\\nsenas\\nsends\\nsenes\\nsengi\\nsenna\\nsenor\\nsensa\\nsensi\\nsente\\nsenti\\nsents\\nsenvy\\nsenza\\nsepad\\nsepal\\nsepic\\nsepoy\\nsepta\\nsepts\\nserac\\nserai\\nseral\\nsered\\nserer\\nseres\\nserfs\\nserge\\nseric\\nserin\\nserks\\nseron\\nserow\\nserra\\nserre\\nserrs\\nserry\\nservo\\nsesey\\nsessa\\nsetae\\nsetal\\nseton\\nsetts\\nsewan\\nsewar\\nsewed\\nsewel\\nsewen\\nsewin\\nsexed\\nsexer\\nsexes\\nsexto\\nsexts\\nseyen\\nshads\\nshags\\nshahs\\nshako\\nshakt\\nshalm\\nshaly\\nshama\\nshams\\nshand\\nshans\\nshaps\\nsharn\\nshash\\nshaul\\nshawm\\nshawn\\nshaws\\nshaya\\nshays\\nshchi\\nsheaf\\nsheal\\nsheas\\nsheds\\nsheel\\nshend\\nshent\\nsheol\\nsherd\\nshere\\nshero\\nshets\\nsheva\\nshewn\\nshews\\nshiai\\nshiel\\nshier\\nshies\\nshill\\nshily\\nshims\\nshins\\nships\\nshirr\\nshirs\\nshish\\nshiso\\nshist\\nshite\\nshits\\nshiur\\nshiva\\nshive\\nshivs\\nshlep\\nshlub\\nshmek\\nshmoe\\nshoat\\nshoed\\nshoer\\nshoes\\nshogi\\nshogs\\nshoji\\nshojo\\nshola\\nshool\\nshoon\\nshoos\\nshope\\nshops\\nshorl\\nshote\\nshots\\nshott\\nshowd\\nshows\\nshoyu\\nshred\\nshris\\nshrow\\nshtik\\nshtum\\nshtup\\nshule\\nshuln\\nshuls\\nshuns\\nshura\\nshute\\nshuts\\nshwas\\nshyer\\nsials\\nsibbs\\nsibyl\\nsices\\nsicht\\nsicko\\nsicks\\nsicky\\nsidas\\nsided\\nsider\\nsides\\nsidha\\nsidhe\\nsidle\\nsield\\nsiens\\nsient\\nsieth\\nsieur\\nsifts\\nsighs\\nsigil\\nsigla\\nsigna\\nsigns\\nsijos\\nsikas\\nsiker\\nsikes\\nsilds\\nsiled\\nsilen\\nsiler\\nsiles\\nsilex\\nsilks\\nsills\\nsilos\\nsilts\\nsilty\\nsilva\\nsimar\\nsimas\\nsimba\\nsimis\\nsimps\\nsimul\\nsinds\\nsined\\nsines\\nsings\\nsinhs\\nsinks\\nsinky\\nsinus\\nsiped\\nsipes\\nsippy\\nsired\\nsiree\\nsires\\nsirih\\nsiris\\nsiroc\\nsirra\\nsirup\\nsisal\\nsises\\nsista\\nsists\\nsitar\\nsited\\nsites\\nsithe\\nsitka\\nsitup\\nsitus\\nsiver\\nsixer\\nsixes\\nsixmo\\nsixte\\nsizar\\nsized\\nsizel\\nsizer\\nsizes\\nskags\\nskail\\nskald\\nskank\\nskart\\nskats\\nskatt\\nskaws\\nskean\\nskear\\nskeds\\nskeed\\nskeef\\nskeen\\nskeer\\nskees\\nskeet\\nskegg\\nskegs\\nskein\\nskelf\\nskell\\nskelm\\nskelp\\nskene\\nskens\\nskeos\\nskeps\\nskers\\nskets\\nskews\\nskids\\nskied\\nskies\\nskiey\\nskimo\\nskims\\nskink\\nskins\\nskint\\nskios\\nskips\\nskirl\\nskirr\\nskite\\nskits\\nskive\\nskivy\\nsklim\\nskoal\\nskody\\nskoff\\nskogs\\nskols\\nskool\\nskort\\nskosh\\nskran\\nskrik\\nskuas\\nskugs\\nskyed\\nskyer\\nskyey\\nskyfs\\nskyre\\nskyrs\\nskyte\\nslabs\\nslade\\nslaes\\nslags\\nslaid\\nslake\\nslams\\nslane\\nslank\\nslaps\\nslart\\nslats\\nslaty\\nslaws\\nslays\\nslebs\\nsleds\\nsleer\\nslews\\nsleys\\nslier\\nslily\\nslims\\nslipe\\nslips\\nslipt\\nslish\\nslits\\nslive\\nsloan\\nslobs\\nsloes\\nslogs\\nsloid\\nslojd\\nslomo\\nsloom\\nsloot\\nslops\\nslopy\\nslorm\\nslots\\nslove\\nslows\\nsloyd\\nslubb\\nslubs\\nslued\\nslues\\nsluff\\nslugs\\nsluit\\nslums\\nslurb\\nslurs\\nsluse\\nslyer\\nslype\\nsmaak\\nsmaik\\nsmalm\\nsmalt\\nsmarm\\nsmaze\\nsmeek\\nsmees\\nsmeik\\nsmeke\\nsmerk\\nsmews\\nsmirr\\nsmirs\\nsmits\\nsmogs\\nsmoko\\nsmolt\\nsmoor\\nsmoot\\nsmore\\nsmorg\\nsmout\\nsmowt\\nsmugs\\nsmurs\\nsmush\\nsmuts\\nsnabs\\nsnafu\\nsnags\\nsnaps\\nsnarf\\nsnark\\nsnars\\nsnary\\nsnash\\nsnath\\nsnaws\\nsnead\\nsneap\\nsnebs\\nsneck\\nsneds\\nsneed\\nsnees\\nsnell\\nsnibs\\nsnick\\nsnies\\nsnift\\nsnigs\\nsnips\\nsnipy\\nsnirt\\nsnits\\nsnobs\\nsnods\\nsnoek\\nsnoep\\nsnogs\\nsnoke\\nsnood\\nsnook\\nsnool\\nsnoot\\nsnots\\nsnowk\\nsnows\\nsnubs\\nsnugs\\nsnush\\nsnyes\\nsoaks\\nsoaps\\nsoare\\nsoars\\nsoave\\nsobas\\nsocas\\nsoces\\nsocko\\nsocks\\nsocle\\nsodas\\nsoddy\\nsodic\\nsodom\\nsofar\\nsofas\\nsofta\\nsofts\\nsofty\\nsoger\\nsohur\\nsoils\\nsoily\\nsojas\\nsojus\\nsokah\\nsoken\\nsokes\\nsokol\\nsolah\\nsolan\\nsolas\\nsolde\\nsoldi\\nsoldo\\nsolds\\nsoled\\nsolei\\nsoler\\nsoles\\nsolon\\nsolos\\nsolum\\nsolus\\nsoman\\nsomas\\nsonce\\nsonde\\nsones\\nsongs\\nsonly\\nsonne\\nsonny\\nsonse\\nsonsy\\nsooey\\nsooks\\nsooky\\nsoole\\nsools\\nsooms\\nsoops\\nsoote\\nsoots\\nsophs\\nsophy\\nsopor\\nsoppy\\nsopra\\nsoral\\nsoras\\nsorbo\\nsorbs\\nsorda\\nsordo\\nsords\\nsored\\nsoree\\nsorel\\nsorer\\nsores\\nsorex\\nsorgo\\nsorns\\nsorra\\nsorta\\nsorts\\nsorus\\nsoths\\nsotol\\nsouce\\nsouct\\nsough\\nsouks\\nsouls\\nsoums\\nsoups\\nsoupy\\nsours\\nsouse\\nsouts\\nsowar\\nsowce\\nsowed\\nsowff\\nsowfs\\nsowle\\nsowls\\nsowms\\nsownd\\nsowne\\nsowps\\nsowse\\nsowth\\nsoyas\\nsoyle\\nsoyuz\\nsozin\\nspacy\\nspado\\nspaed\\nspaer\\nspaes\\nspags\\nspahi\\nspail\\nspain\\nspait\\nspake\\nspald\\nspale\\nspall\\nspalt\\nspams\\nspane\\nspang\\nspans\\nspard\\nspars\\nspart\\nspate\\nspats\\nspaul\\nspawl\\nspaws\\nspayd\\nspays\\nspaza\\nspazz\\nspeal\\nspean\\nspeat\\nspecs\\nspect\\nspeel\\nspeer\\nspeil\\nspeir\\nspeks\\nspeld\\nspelk\\nspeos\\nspets\\nspeug\\nspews\\nspewy\\nspial\\nspica\\nspide\\nspier\\nspies\\nspiff\\nspifs\\nspile\\nspims\\nspina\\nspink\\nspins\\nspirt\\nspiry\\nspits\\nspitz\\nspivs\\nsplay\\nsplog\\nspode\\nspods\\nspoom\\nspoor\\nspoot\\nspork\\nsposh\\nspots\\nsprad\\nsprag\\nsprat\\nspred\\nsprew\\nsprit\\nsprod\\nsprog\\nsprue\\nsprug\\nspuds\\nspued\\nspuer\\nspues\\nspugs\\nspule\\nspume\\nspumy\\nspurs\\nsputa\\nspyal\\nspyre\\nsquab\\nsquaw\\nsqueg\\nsquid\\nsquit\\nsquiz\\nstabs\\nstade\\nstags\\nstagy\\nstaig\\nstane\\nstang\\nstaph\\nstaps\\nstarn\\nstarr\\nstars\\nstats\\nstaun\\nstaws\\nstays\\nstean\\nstear\\nstedd\\nstede\\nsteds\\nsteek\\nsteem\\nsteen\\nsteil\\nstela\\nstele\\nstell\\nsteme\\nstems\\nstend\\nsteno\\nstens\\nstent\\nsteps\\nstept\\nstere\\nstets\\nstews\\nstewy\\nsteys\\nstich\\nstied\\nsties\\nstilb\\nstile\\nstime\\nstims\\nstimy\\nstipa\\nstipe\\nstire\\nstirk\\nstirp\\nstirs\\nstive\\nstivy\\nstoae\\nstoai\\nstoas\\nstoat\\nstobs\\nstoep\\nstogy\\nstoit\\nstoln\\nstoma\\nstond\\nstong\\nstonk\\nstonn\\nstook\\nstoor\\nstope\\nstops\\nstopt\\nstoss\\nstots\\nstott\\nstoun\\nstoup\\nstour\\nstown\\nstowp\\nstows\\nstrad\\nstrae\\nstrag\\nstrak\\nstrep\\nstrew\\nstria\\nstrig\\nstrim\\nstrop\\nstrow\\nstroy\\nstrum\\nstubs\\nstude\\nstuds\\nstull\\nstulm\\nstumm\\nstums\\nstuns\\nstupa\\nstupe\\nsture\\nsturt\\nstyed\\nstyes\\nstyli\\nstylo\\nstyme\\nstymy\\nstyre\\nstyte\\nsubah\\nsubas\\nsubby\\nsuber\\nsubha\\nsucci\\nsucks\\nsucky\\nsucre\\nsudds\\nsudor\\nsudsy\\nsuede\\nsuent\\nsuers\\nsuete\\nsuets\\nsuety\\nsugan\\nsughs\\nsugos\\nsuhur\\nsuids\\nsuint\\nsuits\\nsujee\\nsukhs\\nsukuk\\nsulci\\nsulfa\\nsulfo\\nsulks\\nsulph\\nsulus\\nsumis\\nsumma\\nsumos\\nsumph\\nsumps\\nsunis\\nsunks\\nsunna\\nsunns\\nsunup\\nsupes\\nsupra\\nsurah\\nsural\\nsuras\\nsurat\\nsurds\\nsured\\nsures\\nsurfs\\nsurfy\\nsurgy\\nsurra\\nsused\\nsuses\\nsusus\\nsutor\\nsutra\\nsutta\\nswabs\\nswack\\nswads\\nswage\\nswags\\nswail\\nswain\\nswale\\nswaly\\nswamy\\nswang\\nswank\\nswans\\nswaps\\nswapt\\nsward\\nsware\\nswarf\\nswart\\nswats\\nswayl\\nsways\\nsweal\\nswede\\nsweed\\nsweel\\nsweer\\nswees\\nsweir\\nswelt\\nswerf\\nsweys\\nswies\\nswigs\\nswile\\nswims\\nswink\\nswipe\\nswire\\nswiss\\nswith\\nswits\\nswive\\nswizz\\nswobs\\nswole\\nswoln\\nswops\\nswopt\\nswots\\nswoun\\nsybbe\\nsybil\\nsyboe\\nsybow\\nsycee\\nsyces\\nsycon\\nsyens\\nsyker\\nsykes\\nsylis\\nsylph\\nsylva\\nsymar\\nsynch\\nsyncs\\nsynds\\nsyned\\nsynes\\nsynth\\nsyped\\nsypes\\nsyphs\\nsyrah\\nsyren\\nsysop\\nsythe\\nsyver\\ntaals\\ntaata\\ntaber\\ntabes\\ntabid\\ntabis\\ntabla\\ntabor\\ntabun\\ntabus\\ntacan\\ntaces\\ntacet\\ntache\\ntacho\\ntachs\\ntacks\\ntacos\\ntacts\\ntaels\\ntafia\\ntaggy\\ntagma\\ntahas\\ntahrs\\ntaiga\\ntaigs\\ntaiko\\ntails\\ntains\\ntaira\\ntaish\\ntaits\\ntajes\\ntakas\\ntakes\\ntakhi\\ntakin\\ntakis\\ntakky\\ntalak\\ntalaq\\ntalar\\ntalas\\ntalcs\\ntalcy\\ntalea\\ntaler\\ntales\\ntalks\\ntalky\\ntalls\\ntalma\\ntalpa\\ntaluk\\ntalus\\ntamal\\ntamed\\ntames\\ntamin\\ntamis\\ntammy\\ntamps\\ntanas\\ntanga\\ntangi\\ntangs\\ntanhs\\ntanka\\ntanks\\ntanky\\ntanna\\ntansy\\ntanti\\ntanto\\ntanty\\ntapas\\ntaped\\ntapen\\ntapes\\ntapet\\ntapis\\ntappa\\ntapus\\ntaras\\ntardo\\ntared\\ntares\\ntarga\\ntarge\\ntarns\\ntaroc\\ntarok\\ntaros\\ntarps\\ntarre\\ntarry\\ntarsi\\ntarts\\ntarty\\ntasar\\ntased\\ntaser\\ntases\\ntasks\\ntassa\\ntasse\\ntasso\\ntatar\\ntater\\ntates\\ntaths\\ntatie\\ntatou\\ntatts\\ntatus\\ntaube\\ntauld\\ntauon\\ntaupe\\ntauts\\ntavah\\ntavas\\ntaver\\ntawai\\ntawas\\ntawed\\ntawer\\ntawie\\ntawse\\ntawts\\ntaxed\\ntaxer\\ntaxes\\ntaxis\\ntaxol\\ntaxon\\ntaxor\\ntaxus\\ntayra\\ntazza\\ntazze\\nteade\\nteads\\nteaed\\nteaks\\nteals\\nteams\\ntears\\nteats\\nteaze\\ntechs\\ntechy\\ntecta\\nteels\\nteems\\nteend\\nteene\\nteens\\nteeny\\nteers\\nteffs\\nteggs\\ntegua\\ntegus\\ntehrs\\nteiid\\nteils\\nteind\\nteins\\ntelae\\ntelco\\nteles\\ntelex\\ntelia\\ntelic\\ntells\\ntelly\\nteloi\\ntelos\\ntemed\\ntemes\\ntempi\\ntemps\\ntempt\\ntemse\\ntench\\ntends\\ntendu\\ntenes\\ntenge\\ntenia\\ntenne\\ntenno\\ntenny\\ntenon\\ntents\\ntenty\\ntenue\\ntepal\\ntepas\\ntepoy\\nterai\\nteras\\nterce\\nterek\\nteres\\nterfe\\nterfs\\nterga\\nterms\\nterne\\nterns\\nterry\\nterts\\ntesla\\ntesta\\nteste\\ntests\\ntetes\\nteths\\ntetra\\ntetri\\nteuch\\nteugh\\ntewed\\ntewel\\ntewit\\ntexas\\ntexes\\ntexts\\nthack\\nthagi\\nthaim\\nthale\\nthali\\nthana\\nthane\\nthang\\nthans\\nthanx\\ntharm\\nthars\\nthaws\\nthawy\\nthebe\\ntheca\\ntheed\\ntheek\\nthees\\nthegn\\ntheic\\nthein\\nthelf\\nthema\\nthens\\ntheow\\ntherm\\nthesp\\nthete\\nthews\\nthewy\\nthigs\\nthilk\\nthill\\nthine\\nthins\\nthiol\\nthirl\\nthoft\\nthole\\ntholi\\nthoro\\nthorp\\nthous\\nthowl\\nthrae\\nthraw\\nthrid\\nthrip\\nthroe\\nthuds\\nthugs\\nthuja\\nthunk\\nthurl\\nthuya\\nthymi\\nthymy\\ntians\\ntiars\\ntical\\nticca\\nticed\\ntices\\ntichy\\nticks\\nticky\\ntiddy\\ntided\\ntides\\ntiers\\ntiffs\\ntifos\\ntifts\\ntiges\\ntigon\\ntikas\\ntikes\\ntikis\\ntikka\\ntilak\\ntiled\\ntiler\\ntiles\\ntills\\ntilly\\ntilth\\ntilts\\ntimbo\\ntimed\\ntimes\\ntimon\\ntimps\\ntinas\\ntinct\\ntinds\\ntinea\\ntined\\ntines\\ntinge\\ntings\\ntinks\\ntinny\\ntints\\ntinty\\ntipis\\ntippy\\ntired\\ntires\\ntirls\\ntiros\\ntirrs\\ntitch\\ntiter\\ntitis\\ntitre\\ntitty\\ntitup\\ntiyin\\ntiyns\\ntizes\\ntizzy\\ntoads\\ntoady\\ntoaze\\ntocks\\ntocky\\ntocos\\ntodde\\ntoeas\\ntoffs\\ntoffy\\ntofts\\ntofus\\ntogae\\ntogas\\ntoged\\ntoges\\ntogue\\ntohos\\ntoile\\ntoils\\ntoing\\ntoise\\ntoits\\ntokay\\ntoked\\ntoker\\ntokes\\ntokos\\ntolan\\ntolar\\ntolas\\ntoled\\ntoles\\ntolls\\ntolly\\ntolts\\ntolus\\ntolyl\\ntoman\\ntombs\\ntomes\\ntomia\\ntommy\\ntomos\\ntondi\\ntondo\\ntoned\\ntoner\\ntones\\ntoney\\ntongs\\ntonka\\ntonks\\ntonne\\ntonus\\ntools\\ntooms\\ntoons\\ntoots\\ntoped\\ntopee\\ntopek\\ntoper\\ntopes\\ntophe\\ntophi\\ntophs\\ntopis\\ntopoi\\ntopos\\ntoppy\\ntoque\\ntorah\\ntoran\\ntoras\\ntorcs\\ntores\\ntoric\\ntorii\\ntoros\\ntorot\\ntorrs\\ntorse\\ntorsi\\ntorsk\\ntorta\\ntorte\\ntorts\\ntosas\\ntosed\\ntoses\\ntoshy\\ntossy\\ntoted\\ntoter\\ntotes\\ntotty\\ntouks\\ntouns\\ntours\\ntouse\\ntousy\\ntouts\\ntouze\\ntouzy\\ntowed\\ntowie\\ntowns\\ntowny\\ntowse\\ntowsy\\ntowts\\ntowze\\ntowzy\\ntoyed\\ntoyer\\ntoyon\\ntoyos\\ntozed\\ntozes\\ntozie\\ntrabs\\ntrads\\ntragi\\ntraik\\ntrams\\ntrank\\ntranq\\ntrans\\ntrant\\ntrape\\ntraps\\ntrapt\\ntrass\\ntrats\\ntratt\\ntrave\\ntrayf\\ntrays\\ntreck\\ntreed\\ntreen\\ntrees\\ntrefa\\ntreif\\ntreks\\ntrema\\ntrems\\ntress\\ntrest\\ntrets\\ntrews\\ntreyf\\ntreys\\ntriac\\ntride\\ntrier\\ntries\\ntriff\\ntrigo\\ntrigs\\ntrike\\ntrild\\ntrill\\ntrims\\ntrine\\ntrins\\ntriol\\ntrior\\ntrios\\ntrips\\ntripy\\ntrist\\ntroad\\ntroak\\ntroat\\ntrock\\ntrode\\ntrods\\ntrogs\\ntrois\\ntroke\\ntromp\\ntrona\\ntronc\\ntrone\\ntronk\\ntrons\\ntrooz\\ntroth\\ntrots\\ntrows\\ntroys\\ntrued\\ntrues\\ntrugo\\ntrugs\\ntrull\\ntryer\\ntryke\\ntryma\\ntryps\\ntsade\\ntsadi\\ntsars\\ntsked\\ntsuba\\ntsubo\\ntuans\\ntuart\\ntuath\\ntubae\\ntubar\\ntubas\\ntubby\\ntubed\\ntubes\\ntucks\\ntufas\\ntuffe\\ntuffs\\ntufts\\ntufty\\ntugra\\ntuile\\ntuina\\ntuism\\ntuktu\\ntules\\ntulpa\\ntulsi\\ntumid\\ntummy\\ntumps\\ntumpy\\ntunas\\ntunds\\ntuned\\ntuner\\ntunes\\ntungs\\ntunny\\ntupek\\ntupik\\ntuple\\ntuque\\nturds\\nturfs\\nturfy\\nturks\\nturme\\nturms\\nturns\\nturnt\\nturps\\nturrs\\ntushy\\ntusks\\ntusky\\ntutee\\ntutti\\ntutty\\ntutus\\ntuxes\\ntuyer\\ntwaes\\ntwain\\ntwals\\ntwank\\ntwats\\ntways\\ntweel\\ntween\\ntweep\\ntweer\\ntwerk\\ntwerp\\ntwier\\ntwigs\\ntwill\\ntwilt\\ntwink\\ntwins\\ntwiny\\ntwire\\ntwirp\\ntwite\\ntwits\\ntwoer\\ntwyer\\ntyees\\ntyers\\ntyiyn\\ntykes\\ntyler\\ntymps\\ntynde\\ntyned\\ntynes\\ntypal\\ntyped\\ntypes\\ntypey\\ntypic\\ntypos\\ntypps\\ntypto\\ntyran\\ntyred\\ntyres\\ntyros\\ntythe\\ntzars\\nudals\\nudons\\nugali\\nugged\\nuhlan\\nuhuru\\nukase\\nulama\\nulans\\nulema\\nulmin\\nulnad\\nulnae\\nulnar\\nulnas\\nulpan\\nulvas\\nulyie\\nulzie\\numami\\numbel\\number\\numble\\numbos\\numbre\\numiac\\numiak\\numiaq\\nummah\\nummas\\nummed\\numped\\numphs\\numpie\\numpty\\numrah\\numras\\nunais\\nunapt\\nunarm\\nunary\\nunaus\\nunbag\\nunban\\nunbar\\nunbed\\nunbid\\nunbox\\nuncap\\nunces\\nuncia\\nuncos\\nuncoy\\nuncus\\nundam\\nundee\\nundos\\nundug\\nuneth\\nunfix\\nungag\\nunget\\nungod\\nungot\\nungum\\nunhat\\nunhip\\nunica\\nunits\\nunjam\\nunked\\nunket\\nunkid\\nunlaw\\nunlay\\nunled\\nunlet\\nunlid\\nunman\\nunmew\\nunmix\\nunpay\\nunpeg\\nunpen\\nunpin\\nunred\\nunrid\\nunrig\\nunrip\\nunsaw\\nunsay\\nunsee\\nunsew\\nunsex\\nunsod\\nuntax\\nuntin\\nunwet\\nunwit\\nunwon\\nupbow\\nupbye\\nupdos\\nupdry\\nupend\\nupjet\\nuplay\\nupled\\nuplit\\nupped\\nupran\\nuprun\\nupsee\\nupsey\\nuptak\\nupter\\nuptie\\nuraei\\nurali\\nuraos\\nurare\\nurari\\nurase\\nurate\\nurbex\\nurbia\\nurdee\\nureal\\nureas\\nuredo\\nureic\\nurena\\nurent\\nurged\\nurger\\nurges\\nurial\\nurite\\nurman\\nurnal\\nurned\\nurped\\nursae\\nursid\\nurson\\nurubu\\nurvas\\nusers\\nusnea\\nusque\\nusure\\nusury\\nuteri\\nuveal\\nuveas\\nuvula\\nvacua\\nvaded\\nvades\\nvagal\\nvagus\\nvails\\nvaire\\nvairs\\nvairy\\nvakas\\nvakil\\nvales\\nvalis\\nvalse\\nvamps\\nvampy\\nvanda\\nvaned\\nvanes\\nvangs\\nvants\\nvaped\\nvaper\\nvapes\\nvaran\\nvaras\\nvardy\\nvarec\\nvares\\nvaria\\nvarix\\nvarna\\nvarus\\nvarve\\nvasal\\nvases\\nvasts\\nvasty\\nvatic\\nvatus\\nvauch\\nvaute\\nvauts\\nvawte\\nvaxes\\nveale\\nveals\\nvealy\\nveena\\nveeps\\nveers\\nveery\\nvegas\\nveges\\nvegie\\nvegos\\nvehme\\nveils\\nveily\\nveins\\nveiny\\nvelar\\nvelds\\nveldt\\nveles\\nvells\\nvelum\\nvenae\\nvenal\\nvends\\nvendu\\nveney\\nvenge\\nvenin\\nvents\\nvenus\\nverbs\\nverra\\nverry\\nverst\\nverts\\nvertu\\nvespa\\nvesta\\nvests\\nvetch\\nvexed\\nvexer\\nvexes\\nvexil\\nvezir\\nvials\\nviand\\nvibes\\nvibex\\nvibey\\nviced\\nvices\\nvichy\\nviers\\nviews\\nviewy\\nvifda\\nviffs\\nvigas\\nvigia\\nvilde\\nviler\\nvilli\\nvills\\nvimen\\nvinal\\nvinas\\nvinca\\nvined\\nviner\\nvines\\nvinew\\nvinic\\nvinos\\nvints\\nviold\\nviols\\nvired\\nvireo\\nvires\\nvirga\\nvirge\\nvirid\\nvirls\\nvirtu\\nvisas\\nvised\\nvises\\nvisie\\nvisne\\nvison\\nvisto\\nvitae\\nvitas\\nvitex\\nvitro\\nvitta\\nvivas\\nvivat\\nvivda\\nviver\\nvives\\nvizir\\nvizor\\nvleis\\nvlies\\nvlogs\\nvoars\\nvocab\\nvoces\\nvoddy\\nvodou\\nvodun\\nvoema\\nvogie\\nvoids\\nvoile\\nvoips\\nvolae\\nvolar\\nvoled\\nvoles\\nvolet\\nvolks\\nvolta\\nvolte\\nvolti\\nvolts\\nvolva\\nvolve\\nvomer\\nvoted\\nvotes\\nvouge\\nvoulu\\nvowed\\nvower\\nvoxel\\nvozhd\\nvraic\\nvrils\\nvroom\\nvrous\\nvrouw\\nvrows\\nvuggs\\nvuggy\\nvughs\\nvughy\\nvulgo\\nvulns\\nvulva\\nvutty\\nwaacs\\nwacke\\nwacko\\nwacks\\nwadds\\nwaddy\\nwaded\\nwader\\nwades\\nwadge\\nwadis\\nwadts\\nwaffs\\nwafts\\nwaged\\nwages\\nwagga\\nwagyu\\nwahoo\\nwaide\\nwaifs\\nwaift\\nwails\\nwains\\nwairs\\nwaite\\nwaits\\nwakas\\nwaked\\nwaken\\nwaker\\nwakes\\nwakfs\\nwaldo\\nwalds\\nwaled\\nwaler\\nwales\\nwalie\\nwalis\\nwalks\\nwalla\\nwalls\\nwally\\nwalty\\nwamed\\nwames\\nwamus\\nwands\\nwaned\\nwanes\\nwaney\\nwangs\\nwanks\\nwanky\\nwanle\\nwanly\\nwanna\\nwants\\nwanty\\nwanze\\nwaqfs\\nwarbs\\nwarby\\nwards\\nwared\\nwares\\nwarez\\nwarks\\nwarms\\nwarns\\nwarps\\nwarre\\nwarst\\nwarts\\nwases\\nwashy\\nwasms\\nwasps\\nwaspy\\nwasts\\nwatap\\nwatts\\nwauff\\nwaugh\\nwauks\\nwaulk\\nwauls\\nwaurs\\nwaved\\nwaves\\nwavey\\nwawas\\nwawes\\nwawls\\nwaxed\\nwaxer\\nwaxes\\nwayed\\nwazir\\nwazoo\\nweald\\nweals\\nweamb\\nweans\\nwears\\nwebby\\nweber\\nwecht\\nwedel\\nwedgy\\nweeds\\nweeke\\nweeks\\nweels\\nweems\\nweens\\nweeny\\nweeps\\nweepy\\nweest\\nweete\\nweets\\nwefte\\nwefts\\nweids\\nweils\\nweirs\\nweise\\nweize\\nwekas\\nwelds\\nwelke\\nwelks\\nwelkt\\nwells\\nwelly\\nwelts\\nwembs\\nwends\\nwenge\\nwenny\\nwents\\nweros\\nwersh\\nwests\\nwetas\\nwetly\\nwexed\\nwexes\\nwhamo\\nwhams\\nwhang\\nwhaps\\nwhare\\nwhata\\nwhats\\nwhaup\\nwhaur\\nwheal\\nwhear\\nwheen\\nwheep\\nwheft\\nwhelk\\nwhelm\\nwhens\\nwhets\\nwhews\\nwheys\\nwhids\\nwhift\\nwhigs\\nwhilk\\nwhims\\nwhins\\nwhios\\nwhips\\nwhipt\\nwhirr\\nwhirs\\nwhish\\nwhiss\\nwhist\\nwhits\\nwhity\\nwhizz\\nwhomp\\nwhoof\\nwhoot\\nwhops\\nwhorl\\nwhort\\nwhoso\\nwhows\\nwhump\\nwhups\\nwhyda\\nwicca\\nwicks\\nwicky\\nwiddy\\nwides\\nwiels\\nwifed\\nwifes\\nwifey\\nwifie\\nwifty\\nwigan\\nwigga\\nwiggy\\nwikis\\nwilco\\nwilds\\nwiled\\nwiles\\nwilga\\nwilis\\nwilja\\nwills\\nwilts\\nwimps\\nwinds\\nwined\\nwines\\nwiney\\nwinge\\nwings\\nwingy\\nwinks\\nwinna\\nwinns\\nwinos\\nwinze\\nwiped\\nwiper\\nwipes\\nwired\\nwirer\\nwires\\nwirra\\nwised\\nwises\\nwisha\\nwisht\\nwisps\\nwists\\nwitan\\nwited\\nwites\\nwithe\\nwiths\\nwithy\\nwived\\nwiver\\nwives\\nwizen\\nwizes\\nwoads\\nwoald\\nwocks\\nwodge\\nwoful\\nwojus\\nwoker\\nwokka\\nwolds\\nwolfs\\nwolly\\nwolve\\nwombs\\nwomby\\nwomyn\\nwonga\\nwongi\\nwonks\\nwonky\\nwonts\\nwoods\\nwooed\\nwoofs\\nwoofy\\nwoold\\nwools\\nwoons\\nwoops\\nwoopy\\nwoose\\nwoosh\\nwootz\\nwords\\nworks\\nworms\\nwormy\\nworts\\nwowed\\nwowee\\nwoxen\\nwrang\\nwraps\\nwrapt\\nwrast\\nwrate\\nwrawl\\nwrens\\nwrick\\nwried\\nwrier\\nwries\\nwrits\\nwroke\\nwroot\\nwroth\\nwryer\\nwuddy\\nwudus\\nwulls\\nwurst\\nwuses\\nwushu\\nwussy\\nwuxia\\nwyled\\nwyles\\nwynds\\nwynns\\nwyted\\nwytes\\nxebec\\nxenia\\nxenic\\nxenon\\nxeric\\nxerox\\nxerus\\nxoana\\nxrays\\nxylan\\nxylem\\nxylic\\nxylol\\nxylyl\\nxysti\\nxysts\\nyaars\\nyabas\\nyabba\\nyabby\\nyacca\\nyacka\\nyacks\\nyaffs\\nyager\\nyages\\nyagis\\nyahoo\\nyaird\\nyakka\\nyakow\\nyales\\nyamen\\nyampy\\nyamun\\nyangs\\nyanks\\nyapok\\nyapon\\nyapps\\nyappy\\nyarak\\nyarco\\nyards\\nyarer\\nyarfa\\nyarks\\nyarns\\nyarrs\\nyarta\\nyarto\\nyates\\nyauds\\nyauld\\nyaups\\nyawed\\nyawey\\nyawls\\nyawns\\nyawny\\nyawps\\nybore\\nyclad\\nycled\\nycond\\nydrad\\nydred\\nyeads\\nyeahs\\nyealm\\nyeans\\nyeard\\nyears\\nyecch\\nyechs\\nyechy\\nyedes\\nyeeds\\nyeesh\\nyeggs\\nyelks\\nyells\\nyelms\\nyelps\\nyelts\\nyenta\\nyente\\nyerba\\nyerds\\nyerks\\nyeses\\nyesks\\nyests\\nyesty\\nyetis\\nyetts\\nyeuks\\nyeuky\\nyeven\\nyeves\\nyewen\\nyexed\\nyexes\\nyfere\\nyiked\\nyikes\\nyills\\nyince\\nyipes\\nyippy\\nyirds\\nyirks\\nyirrs\\nyirth\\nyites\\nyitie\\nylems\\nylike\\nylkes\\nymolt\\nympes\\nyobbo\\nyobby\\nyocks\\nyodel\\nyodhs\\nyodle\\nyogas\\nyogee\\nyoghs\\nyogic\\nyogin\\nyogis\\nyoick\\nyojan\\nyoked\\nyokel\\nyoker\\nyokes\\nyokul\\nyolks\\nyolky\\nyomim\\nyomps\\nyonic\\nyonis\\nyonks\\nyoofs\\nyoops\\nyores\\nyorks\\nyorps\\nyouks\\nyourn\\nyours\\nyourt\\nyouse\\nyowed\\nyowes\\nyowie\\nyowls\\nyowza\\nyrapt\\nyrent\\nyrivd\\nyrneh\\nysame\\nytost\\nyuans\\nyucas\\nyucca\\nyucch\\nyucko\\nyucks\\nyucky\\nyufts\\nyugas\\nyuked\\nyukes\\nyukky\\nyukos\\nyulan\\nyules\\nyummo\\nyummy\\nyumps\\nyupon\\nyuppy\\nyurta\\nyurts\\nyuzus\\nzabra\\nzacks\\nzaida\\nzaidy\\nzaire\\nzakat\\nzaman\\nzambo\\nzamia\\nzanja\\nzante\\nzanza\\nzanze\\nzappy\\nzarfs\\nzaris\\nzatis\\nzaxes\\nzayin\\nzazen\\nzeals\\nzebec\\nzebub\\nzebus\\nzedas\\nzeins\\nzendo\\nzerda\\nzerks\\nzeros\\nzests\\nzetas\\nzexes\\nzezes\\nzhomo\\nzibet\\nziffs\\nzigan\\nzilas\\nzilch\\nzilla\\nzills\\nzimbi\\nzimbs\\nzinco\\nzincs\\nzincy\\nzineb\\nzines\\nzings\\nzingy\\nzinke\\nzinky\\nzippo\\nzippy\\nziram\\nzitis\\nzizel\\nzizit\\nzlote\\nzloty\\nzoaea\\nzobos\\nzobus\\nzocco\\nzoeae\\nzoeal\\nzoeas\\nzoism\\nzoist\\nzombi\\nzonae\\nzonda\\nzoned\\nzoner\\nzones\\nzonks\\nzooea\\nzooey\\nzooid\\nzooks\\nzooms\\nzoons\\nzooty\\nzoppa\\nzoppo\\nzoril\\nzoris\\nzorro\\nzouks\\nzowee\\nzowie\\nzulus\\nzupan\\nzupas\\nzuppa\\nzurfs\\nzuzim\\nzygal\\nzygon\\nzymes\\nzymic\";","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import styles from './PatternSearch.module.css';\n\nexport default function PatternSearch({ words }) {\n  return (\n    <div className={styles.main}>\n      <div>{`PatternSearch [${words.length}]`}</div>\n    </div>\n  );\n}\n","import styles from './LetterSearch.module.css';\n\nexport default function LetterSearch({ words }) {\n  return (\n    <div className={styles.main}>\n      <div>{`LetterSearch [${words.length}]`}</div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"main__eYC4W\",\"title\":\"title__L5hTC\",\"version\":\"version__4gqHp\",\"dropdown\":\"dropdown__JuTX9\",\"dropdowns\":\"dropdowns__Cxjyw\",\"separator\":\"separator__UUwnC\",\"description\":\"description__GdBwm\",\"display\":\"display__KM5eB\"};","import { useState } from 'preact/hooks';\n\nimport { version } from '../../package.json';\nimport answerWords from '../data/answerWords.txt';\nimport allWords from '../data/allWords.txt';\nimport {\n  wordsDefault,\n  wordNames,\n  displayDefault,\n  displayNames,\n  displayElements,\n  displayDescriptions,\n} from '../data/display.js';\nimport styles from './Home.module.css';\n\nconst answers = answerWords.split('\\n');\nconst all = allWords.split('\\n');\n\nexport default function Home() {\n  const [display, setDisplay] = useState(displayDefault);\n  const [useAll, setUseAll] = useState(false);\n  const words = useAll ? all : answers;\n\n  function changeDisplay(e) {\n    setDisplay(e.target.value);\n  }\n\n  function changeUseAll(e) {\n    setUseAll(e.target.value === 'all');\n  }\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.title}>\n        <h1>Wordle Stats</h1>\n        <span className={styles.version}>{version}</span>\n      </div>\n      <div className={styles.dropdowns}>\n        {buildDropdown(displayNames, displayDefault, changeDisplay)}\n        <span className={styles.separator}>{'of'}</span>\n        {buildDropdown(wordNames, wordsDefault, changeUseAll)}\n      </div>\n      <div className={styles.description}>\n        {displayDescriptions[display](words.length)}\n      </div>\n      <div className={styles.display}>\n        {displayElements[display]({ words })}\n      </div>\n    </div>\n  );\n}\n\nfunction buildDropdown(namesObj, selectedName, onChange) {\n  const entries = Object.entries(namesObj);\n\n  return (\n    <select onchange={onChange}>\n      {entries.map((entry) => {\n        const selected = entry[0] === selectedName ? 'selected' : '';\n        \n        return (\n          <option value={entry[0]} selected={selected}>\n            {entry[1]}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n","import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\thooks._pendingEffects = [];\n\t}\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks && c.__hooks._pendingEffects.length) {\n\t\tafterPaint(afterPaintEffects.push(c));\n\t}\n\tcurrentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\n\t\t\t\tif (hookState._value[0] !== nextValue) {\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\t}\n\n\treturn hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => ref.current = null;\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._value = factory();\n\t\tstate._args = args;\n\t\tstate._factory = factory;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n","//??? add explanation, colors, click on a letter\n//??? add clickable letters\nimport Home from './components/Home';\nimport './style';\n\nexport default function App() {\n  return (\n    <Home />\n  );\n}\n","export function countLettersByPosition(index, words) {\n  const a = 'a'.charCodeAt(0);\n  const allLetters = Array.from(Array(26).keys(), (i) => String.fromCharCode(a + i));\n  const zeros = allLetters.reduce((all, letter) => ({ ...all, [letter]: 0}), {});\n  return words.reduce((counts, word) => {\n    const letter = word[index];\n\n    return {\n      ...counts,\n      [letter]: counts[letter] + 1,\n    }\n  }, zeros);\n}\n\nexport function sortLetterCounts(byLetter) {\n  const entries = Object.entries(byLetter);\n  const byCount = (a, b) => {\n    if (a[1] === b[1]) {\n      return (a[0] > b[0] ? 1 : -1);\n    }\n    return b[1] - a[1];\n  };\n\n  return entries.sort(byCount);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"main__wHwG-\"};","import { EMPTY_ARR } from \"./constants\";\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n","import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n","import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/**\n * Asynchronously schedule a callback\n * @type {(cb: () => void) => void}\n */\n/* istanbul ignore next */\n// Note the following line isn't tree-shaken by rollup cuz of rollup/rollup#2566\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n","import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tc,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (\n\t\t\tvalue != null &&\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\n\t\t) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n","import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc.state = c._nextState;\n\n\t\t\tif ((tmp = options._render)) tmp(newVNode);\n\n\t\t\tc._dirty = false;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(r[i], parentVNode, typeof vnode.type != 'function');\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) removeNode(vnode._dom);\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n","import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n","import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n","export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n","import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n","/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"main__FhM7p\",\"label\":\"label__-PwqS\",\"box\":\"box__CGvn0\",\"boxes\":\"boxes__CbFX2\",\"columns\":\"columns__qZbLA\",\"column\":\"column__Z63Tw\",\"letterCount\":\"letterCount__wpSqd\",\"letter\":\"letter__+dBPV\",\"count\":\"count__ci2qK\",\"green\":\"green__xafLD\",\"yellow\":\"yellow__iXcr8\",\"gray\":\"gray__Xqu+u\"};","/* global __webpack_public_path__ */\n\nimport * as Preact from 'preact';\nconst { h, render, hydrate } = Preact;\n\nconst interopDefault = m => (m && m.default ? m.default : m);\n\nconst normalizeURL = url => (url[url.length - 1] === '/' ? url : url + '/');\n\nif (process.env.NODE_ENV === 'development') {\n\t// enable preact devtools\n\trequire('preact/debug');\n\n\t// only add a debug sw if webpack service worker is not requested.\n\tif (process.env.ADD_SW === undefined && 'serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.register(\n\t\t\tnormalizeURL(__webpack_public_path__) + 'sw-debug.js'\n\t\t);\n\t} else if (process.env.ADD_SW && 'serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.register(\n\t\t\tnormalizeURL(__webpack_public_path__) +\n\t\t\t\t(process.env.ES_BUILD ? 'sw-esm.js' : 'sw.js')\n\t\t);\n\t}\n} else if (process.env.ADD_SW && 'serviceWorker' in navigator) {\n\tnavigator.serviceWorker.register(\n\t\tnormalizeURL(__webpack_public_path__) +\n\t\t\t(process.env.ES_BUILD ? 'sw-esm.js' : 'sw.js')\n\t);\n}\n\nlet app = interopDefault(require('preact-cli-entrypoint'));\n\nif (typeof app === 'function') {\n\tlet root =\n\t\tdocument.getElementById('preact_root') || document.body.firstElementChild;\n\n\tlet init = () => {\n\t\tlet app = interopDefault(require('preact-cli-entrypoint'));\n\t\tlet preRenderData = {};\n\t\tconst inlineDataElement = document.querySelector(\n\t\t\t'[type=\"__PREACT_CLI_DATA__\"]'\n\t\t);\n\t\tif (inlineDataElement) {\n\t\t\tpreRenderData =\n\t\t\t\tJSON.parse(decodeURI(inlineDataElement.innerHTML)).preRenderData ||\n\t\t\t\tpreRenderData;\n\t\t}\n\t\t/* An object named CLI_DATA is passed as a prop,\n\t\t * this keeps us future proof if in case we decide,\n\t\t * to send other data like at some point in time.\n\t\t */\n\t\tconst CLI_DATA = { preRenderData };\n\t\tconst currentURL = preRenderData.url ? normalizeURL(preRenderData.url) : '';\n\t\tconst canHydrate =\n\t\t\tprocess.env.PRERENDER &&\n\t\t\tprocess.env.NODE_ENV === 'production' &&\n\t\t\thydrate &&\n\t\t\tcurrentURL === normalizeURL(location.pathname);\n\t\tconst doRender = canHydrate ? hydrate : render;\n\t\tdoRender(h(app, { CLI_DATA }), document.body, root);\n\t};\n\n\tif (module.hot) module.hot.accept('preact-cli-entrypoint', init);\n\n\tinit();\n}\n","import LetterPositions from '../components/LetterPositions';\nimport PatternSearch from '../components/PatternSearch';\nimport LetterSearch from '../components/LetterSearch';\n\nexport const wordsDefault = 'answers';\nexport const wordNames = {\n  answers: 'Possible Answers',\n  all: 'All Valid Guesses'\n};\n\nexport const displayDefault = 'positionCounts';\nexport const displayNames = {\n  letterSearch: 'Letter Pattern Search',\n  patternSearch: 'Letter Pattern Search',\n  positionCounts: 'Letter Counts Per Position',\n}\nexport const displayElements = {\n  letterSearch: LetterSearch,\n  patternSearch: PatternSearch,\n  positionCounts: LetterPositions,\n};\nexport const displayDescriptions = {\n  letterSearch: (total) => `letterSearch ${total}`,\n  patternSearch: (total) => `patternSearch ${total}`,\n  positionCounts: (total) => `Shows the number of times each letter appears in\n  each of the positions in the ${total} words. Greens appear in that position at \n  least 10% of the time, yellows at least 3% of the time, and grays at least 1% \n  of the time. Click on a letter to see the percentages`, \n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"main__SzV8l\"};","export default \"aback\\nabase\\nabate\\nabbey\\nabbot\\nabhor\\nabide\\nabled\\nabode\\nabort\\nabout\\nabove\\nabuse\\nabyss\\nacorn\\nacrid\\nactor\\nacute\\nadage\\nadapt\\nadept\\nadmin\\nadmit\\nadobe\\nadopt\\nadore\\nadorn\\nadult\\naffix\\nafire\\nafoot\\nafoul\\nafter\\nagain\\nagape\\nagate\\nagent\\nagile\\naging\\naglow\\nagony\\nagree\\nahead\\naider\\naisle\\nalarm\\nalbum\\nalert\\nalgae\\nalibi\\nalien\\nalign\\nalike\\nalive\\nallay\\nalley\\nallot\\nallow\\nalloy\\naloft\\nalone\\nalong\\naloof\\naloud\\nalpha\\naltar\\nalter\\namass\\namaze\\namber\\namble\\namend\\namiss\\namity\\namong\\nample\\namply\\namuse\\nangel\\nanger\\nangle\\nangry\\nangst\\nanime\\nankle\\nannex\\nannoy\\nannul\\nanode\\nantic\\nanvil\\naorta\\napart\\naphid\\naping\\napnea\\napple\\napply\\napron\\naptly\\narbor\\nardor\\narena\\nargue\\narise\\narmor\\naroma\\narose\\narray\\narrow\\narson\\nartsy\\nascot\\nashen\\naside\\naskew\\nassay\\nasset\\natoll\\natone\\nattic\\naudio\\naudit\\naugur\\naunty\\navail\\navert\\navian\\navoid\\nawait\\nawake\\naward\\naware\\nawash\\nawful\\nawoke\\naxial\\naxiom\\naxion\\nazure\\nbacon\\nbadge\\nbadly\\nbagel\\nbaggy\\nbaker\\nbaler\\nbalmy\\nbanal\\nbanjo\\nbarge\\nbaron\\nbasal\\nbasic\\nbasil\\nbasin\\nbasis\\nbaste\\nbatch\\nbathe\\nbaton\\nbatty\\nbawdy\\nbayou\\nbeach\\nbeady\\nbeard\\nbeast\\nbeech\\nbeefy\\nbefit\\nbegan\\nbegat\\nbeget\\nbegin\\nbegun\\nbeing\\nbelch\\nbelie\\nbelle\\nbelly\\nbelow\\nbench\\nberet\\nberry\\nberth\\nbeset\\nbetel\\nbevel\\nbezel\\nbible\\nbicep\\nbiddy\\nbigot\\nbilge\\nbilly\\nbinge\\nbingo\\nbiome\\nbirch\\nbirth\\nbison\\nbitty\\nblack\\nblade\\nblame\\nbland\\nblank\\nblare\\nblast\\nblaze\\nbleak\\nbleat\\nbleed\\nbleep\\nblend\\nbless\\nblimp\\nblind\\nblink\\nbliss\\nblitz\\nbloat\\nblock\\nbloke\\nblond\\nblood\\nbloom\\nblown\\nbluer\\nbluff\\nblunt\\nblurb\\nblurt\\nblush\\nboard\\nboast\\nbobby\\nboney\\nbongo\\nbonus\\nbooby\\nboost\\nbooth\\nbooty\\nbooze\\nboozy\\nborax\\nborne\\nbosom\\nbossy\\nbotch\\nbough\\nboule\\nbound\\nbowel\\nboxer\\nbrace\\nbraid\\nbrain\\nbrake\\nbrand\\nbrash\\nbrass\\nbrave\\nbravo\\nbrawl\\nbrawn\\nbread\\nbreak\\nbreed\\nbriar\\nbribe\\nbrick\\nbride\\nbrief\\nbrine\\nbring\\nbrink\\nbriny\\nbrisk\\nbroad\\nbroil\\nbroke\\nbrood\\nbrook\\nbroom\\nbroth\\nbrown\\nbrunt\\nbrush\\nbrute\\nbuddy\\nbudge\\nbuggy\\nbugle\\nbuild\\nbuilt\\nbulge\\nbulky\\nbully\\nbunch\\nbunny\\nburly\\nburnt\\nburst\\nbused\\nbushy\\nbutch\\nbutte\\nbuxom\\nbuyer\\nbylaw\\ncabal\\ncabby\\ncabin\\ncable\\ncacao\\ncache\\ncacti\\ncaddy\\ncadet\\ncagey\\ncairn\\ncamel\\ncameo\\ncanal\\ncandy\\ncanny\\ncanoe\\ncanon\\ncaper\\ncaput\\ncarat\\ncargo\\ncarol\\ncarry\\ncarve\\ncaste\\ncatch\\ncater\\ncatty\\ncaulk\\ncause\\ncavil\\ncease\\ncedar\\ncello\\nchafe\\nchaff\\nchain\\nchair\\nchalk\\nchamp\\nchant\\nchaos\\nchard\\ncharm\\nchart\\nchase\\nchasm\\ncheap\\ncheat\\ncheck\\ncheek\\ncheer\\nchess\\nchest\\nchick\\nchide\\nchief\\nchild\\nchili\\nchill\\nchime\\nchina\\nchirp\\nchock\\nchoir\\nchoke\\nchord\\nchore\\nchose\\nchuck\\nchump\\nchunk\\nchurn\\nchute\\ncider\\ncigar\\ncinch\\ncirca\\ncivic\\ncivil\\nclack\\nclaim\\nclamp\\nclang\\nclank\\nclash\\nclasp\\nclass\\nclean\\nclear\\ncleat\\ncleft\\nclerk\\nclick\\ncliff\\nclimb\\ncling\\nclink\\ncloak\\nclock\\nclone\\nclose\\ncloth\\ncloud\\nclout\\nclove\\nclown\\ncluck\\nclued\\nclump\\nclung\\ncoach\\ncoast\\ncobra\\ncocoa\\ncolon\\ncolor\\ncomet\\ncomfy\\ncomic\\ncomma\\nconch\\ncondo\\nconic\\ncopse\\ncoral\\ncorer\\ncorny\\ncouch\\ncough\\ncould\\ncount\\ncoupe\\ncourt\\ncoven\\ncover\\ncovet\\ncovey\\ncower\\ncoyly\\ncrack\\ncraft\\ncramp\\ncrane\\ncrank\\ncrash\\ncrass\\ncrate\\ncrave\\ncrawl\\ncraze\\ncrazy\\ncreak\\ncream\\ncredo\\ncreed\\ncreek\\ncreep\\ncreme\\ncrepe\\ncrept\\ncress\\ncrest\\ncrick\\ncried\\ncrier\\ncrime\\ncrimp\\ncrisp\\ncroak\\ncrock\\ncrone\\ncrony\\ncrook\\ncross\\ncroup\\ncrowd\\ncrown\\ncrude\\ncruel\\ncrumb\\ncrump\\ncrush\\ncrust\\ncrypt\\ncubic\\ncumin\\ncurio\\ncurly\\ncurry\\ncurse\\ncurve\\ncurvy\\ncutie\\ncyber\\ncycle\\ncynic\\ndaddy\\ndaily\\ndairy\\ndaisy\\ndally\\ndance\\ndandy\\ndatum\\ndaunt\\ndealt\\ndeath\\ndebar\\ndebit\\ndebug\\ndebut\\ndecal\\ndecay\\ndecor\\ndecoy\\ndecry\\ndefer\\ndeign\\ndeity\\ndelay\\ndelta\\ndelve\\ndemon\\ndemur\\ndenim\\ndense\\ndepot\\ndepth\\nderby\\ndeter\\ndetox\\ndeuce\\ndevil\\ndiary\\ndicey\\ndigit\\ndilly\\ndimly\\ndiner\\ndingo\\ndingy\\ndiode\\ndirge\\ndirty\\ndisco\\nditch\\nditto\\nditty\\ndiver\\ndizzy\\ndodge\\ndodgy\\ndogma\\ndoing\\ndolly\\ndonor\\ndonut\\ndopey\\ndoubt\\ndough\\ndowdy\\ndowel\\ndowny\\ndowry\\ndozen\\ndraft\\ndrain\\ndrake\\ndrama\\ndrank\\ndrape\\ndrawl\\ndrawn\\ndread\\ndream\\ndress\\ndried\\ndrier\\ndrift\\ndrill\\ndrink\\ndrive\\ndroit\\ndroll\\ndrone\\ndrool\\ndroop\\ndross\\ndrove\\ndrown\\ndruid\\ndrunk\\ndryer\\ndryly\\nduchy\\ndully\\ndummy\\ndumpy\\ndunce\\ndusky\\ndusty\\ndutch\\nduvet\\ndwarf\\ndwell\\ndwelt\\ndying\\neager\\neagle\\nearly\\nearth\\neasel\\neaten\\neater\\nebony\\neclat\\nedict\\nedify\\neerie\\negret\\neight\\neject\\neking\\nelate\\nelbow\\nelder\\nelect\\nelegy\\nelfin\\nelide\\nelite\\nelope\\nelude\\nemail\\nembed\\nember\\nemcee\\nempty\\nenact\\nendow\\nenema\\nenemy\\nenjoy\\nennui\\nensue\\nenter\\nentry\\nenvoy\\nepoch\\nepoxy\\nequal\\nequip\\nerase\\nerect\\nerode\\nerror\\nerupt\\nessay\\nester\\nether\\nethic\\nethos\\netude\\nevade\\nevent\\nevery\\nevict\\nevoke\\nexact\\nexalt\\nexcel\\nexert\\nexile\\nexist\\nexpel\\nextol\\nextra\\nexult\\neying\\nfable\\nfacet\\nfaint\\nfairy\\nfaith\\nfalse\\nfancy\\nfanny\\nfarce\\nfatal\\nfatty\\nfault\\nfauna\\nfavor\\nfeast\\nfecal\\nfeign\\nfella\\nfelon\\nfemme\\nfemur\\nfence\\nferal\\nferry\\nfetal\\nfetch\\nfetid\\nfetus\\nfever\\nfewer\\nfiber\\nficus\\nfield\\nfiend\\nfiery\\nfifth\\nfifty\\nfight\\nfiler\\nfilet\\nfilly\\nfilmy\\nfilth\\nfinal\\nfinch\\nfiner\\nfirst\\nfishy\\nfixer\\nfizzy\\nfjord\\nflack\\nflail\\nflair\\nflake\\nflaky\\nflame\\nflank\\nflare\\nflash\\nflask\\nfleck\\nfleet\\nflesh\\nflick\\nflier\\nfling\\nflint\\nflirt\\nfloat\\nflock\\nflood\\nfloor\\nflora\\nfloss\\nflour\\nflout\\nflown\\nfluff\\nfluid\\nfluke\\nflume\\nflung\\nflunk\\nflush\\nflute\\nflyer\\nfoamy\\nfocal\\nfocus\\nfoggy\\nfoist\\nfolio\\nfolly\\nforay\\nforce\\nforge\\nforgo\\nforte\\nforth\\nforty\\nforum\\nfound\\nfoyer\\nfrail\\nframe\\nfrank\\nfraud\\nfreak\\nfreed\\nfreer\\nfresh\\nfriar\\nfried\\nfrill\\nfrisk\\nfritz\\nfrock\\nfrond\\nfront\\nfrost\\nfroth\\nfrown\\nfroze\\nfruit\\nfudge\\nfugue\\nfully\\nfungi\\nfunky\\nfunny\\nfuror\\nfurry\\nfussy\\nfuzzy\\ngaffe\\ngaily\\ngamer\\ngamma\\ngamut\\ngassy\\ngaudy\\ngauge\\ngaunt\\ngauze\\ngavel\\ngawky\\ngayer\\ngayly\\ngazer\\ngecko\\ngeeky\\ngeese\\ngenie\\ngenre\\nghost\\nghoul\\ngiant\\ngiddy\\ngipsy\\ngirly\\ngirth\\ngiven\\ngiver\\nglade\\ngland\\nglare\\nglass\\nglaze\\ngleam\\nglean\\nglide\\nglint\\ngloat\\nglobe\\ngloom\\nglory\\ngloss\\nglove\\nglyph\\ngnash\\ngnome\\ngodly\\ngoing\\ngolem\\ngolly\\ngonad\\ngoner\\ngoody\\ngooey\\ngoofy\\ngoose\\ngorge\\ngouge\\ngourd\\ngrace\\ngrade\\ngraft\\ngrail\\ngrain\\ngrand\\ngrant\\ngrape\\ngraph\\ngrasp\\ngrass\\ngrate\\ngrave\\ngravy\\ngraze\\ngreat\\ngreed\\ngreen\\ngreet\\ngrief\\ngrill\\ngrime\\ngrimy\\ngrind\\ngripe\\ngroan\\ngroin\\ngroom\\ngrope\\ngross\\ngroup\\ngrout\\ngrove\\ngrowl\\ngrown\\ngruel\\ngruff\\ngrunt\\nguard\\nguava\\nguess\\nguest\\nguide\\nguild\\nguile\\nguilt\\nguise\\ngulch\\ngully\\ngumbo\\ngummy\\nguppy\\ngusto\\ngusty\\ngypsy\\nhabit\\nhairy\\nhalve\\nhandy\\nhappy\\nhardy\\nharem\\nharpy\\nharry\\nharsh\\nhaste\\nhasty\\nhatch\\nhater\\nhaunt\\nhaute\\nhaven\\nhavoc\\nhazel\\nheady\\nheard\\nheart\\nheath\\nheave\\nheavy\\nhedge\\nhefty\\nheist\\nhelix\\nhello\\nhence\\nheron\\nhilly\\nhinge\\nhippo\\nhippy\\nhitch\\nhoard\\nhobby\\nhoist\\nholly\\nhomer\\nhoney\\nhonor\\nhorde\\nhorny\\nhorse\\nhotel\\nhotly\\nhound\\nhouse\\nhovel\\nhover\\nhowdy\\nhuman\\nhumid\\nhumor\\nhumph\\nhumus\\nhunch\\nhunky\\nhurry\\nhusky\\nhussy\\nhutch\\nhydro\\nhyena\\nhymen\\nhyper\\nicily\\nicing\\nideal\\nidiom\\nidiot\\nidler\\nidyll\\nigloo\\niliac\\nimage\\nimbue\\nimpel\\nimply\\ninane\\ninbox\\nincur\\nindex\\ninept\\ninert\\ninfer\\ningot\\ninlay\\ninlet\\ninner\\ninput\\ninter\\nintro\\nionic\\nirate\\nirony\\nislet\\nissue\\nitchy\\nivory\\njaunt\\njazzy\\njelly\\njerky\\njetty\\njewel\\njiffy\\njoint\\njoist\\njoker\\njolly\\njoust\\njudge\\njuice\\njuicy\\njumbo\\njumpy\\njunta\\njunto\\njuror\\nkappa\\nkarma\\nkayak\\nkebab\\nkhaki\\nkinky\\nkiosk\\nkitty\\nknack\\nknave\\nknead\\nkneed\\nkneel\\nknelt\\nknife\\nknock\\nknoll\\nknown\\nkoala\\nkrill\\nlabel\\nlabor\\nladen\\nladle\\nlager\\nlance\\nlanky\\nlapel\\nlapse\\nlarge\\nlarva\\nlasso\\nlatch\\nlater\\nlathe\\nlatte\\nlaugh\\nlayer\\nleach\\nleafy\\nleaky\\nleant\\nleapt\\nlearn\\nlease\\nleash\\nleast\\nleave\\nledge\\nleech\\nleery\\nlefty\\nlegal\\nleggy\\nlemon\\nlemur\\nleper\\nlevel\\nlever\\nlibel\\nliege\\nlight\\nliken\\nlilac\\nlimbo\\nlimit\\nlinen\\nliner\\nlingo\\nlipid\\nlithe\\nliver\\nlivid\\nllama\\nloamy\\nloath\\nlobby\\nlocal\\nlocus\\nlodge\\nlofty\\nlogic\\nlogin\\nloopy\\nloose\\nlorry\\nloser\\nlouse\\nlousy\\nlover\\nlower\\nlowly\\nloyal\\nlucid\\nlucky\\nlumen\\nlumpy\\nlunar\\nlunch\\nlunge\\nlupus\\nlurch\\nlurid\\nlusty\\nlying\\nlymph\\nlyric\\nmacaw\\nmacho\\nmacro\\nmadam\\nmadly\\nmafia\\nmagic\\nmagma\\nmaize\\nmajor\\nmaker\\nmambo\\nmamma\\nmammy\\nmanga\\nmange\\nmango\\nmangy\\nmania\\nmanic\\nmanly\\nmanor\\nmaple\\nmarch\\nmarry\\nmarsh\\nmason\\nmasse\\nmatch\\nmatey\\nmauve\\nmaxim\\nmaybe\\nmayor\\nmealy\\nmeant\\nmeaty\\nmecca\\nmedal\\nmedia\\nmedic\\nmelee\\nmelon\\nmercy\\nmerge\\nmerit\\nmerry\\nmetal\\nmeter\\nmetro\\nmicro\\nmidge\\nmidst\\nmight\\nmilky\\nmimic\\nmince\\nminer\\nminim\\nminor\\nminty\\nminus\\nmirth\\nmiser\\nmissy\\nmocha\\nmodal\\nmodel\\nmodem\\nmogul\\nmoist\\nmolar\\nmoldy\\nmoney\\nmonth\\nmoody\\nmoose\\nmoral\\nmoron\\nmorph\\nmossy\\nmotel\\nmotif\\nmotor\\nmotto\\nmoult\\nmound\\nmount\\nmourn\\nmouse\\nmouth\\nmover\\nmovie\\nmower\\nmucky\\nmucus\\nmuddy\\nmulch\\nmummy\\nmunch\\nmural\\nmurky\\nmushy\\nmusic\\nmusky\\nmusty\\nmyrrh\\nnadir\\nnaive\\nnanny\\nnasal\\nnasty\\nnatal\\nnaval\\nnavel\\nneedy\\nneigh\\nnerdy\\nnerve\\nnever\\nnewer\\nnewly\\nnicer\\nniche\\nniece\\nnight\\nninja\\nninny\\nninth\\nnoble\\nnobly\\nnoise\\nnoisy\\nnomad\\nnoose\\nnorth\\nnosey\\nnotch\\nnovel\\nnudge\\nnurse\\nnutty\\nnylon\\nnymph\\noaken\\nobese\\noccur\\nocean\\noctal\\noctet\\nodder\\noddly\\noffal\\noffer\\noften\\nolden\\nolder\\nolive\\nombre\\nomega\\nonion\\nonset\\nopera\\nopine\\nopium\\noptic\\norbit\\norder\\norgan\\nother\\notter\\nought\\nounce\\noutdo\\nouter\\noutgo\\novary\\novate\\novert\\novine\\novoid\\nowing\\nowner\\noxide\\nozone\\npaddy\\npagan\\npaint\\npaler\\npalsy\\npanel\\npanic\\npansy\\npapal\\npaper\\nparer\\nparka\\nparry\\nparse\\nparty\\npasta\\npaste\\npasty\\npatch\\npatio\\npatsy\\npatty\\npause\\npayee\\npayer\\npeace\\npeach\\npearl\\npecan\\npedal\\npenal\\npence\\npenne\\npenny\\nperch\\nperil\\nperky\\npesky\\npesto\\npetal\\npetty\\nphase\\nphone\\nphony\\nphoto\\npiano\\npicky\\npiece\\npiety\\npiggy\\npilot\\npinch\\npiney\\npinky\\npinto\\npiper\\npique\\npitch\\npithy\\npivot\\npixel\\npixie\\npizza\\nplace\\nplaid\\nplain\\nplait\\nplane\\nplank\\nplant\\nplate\\nplaza\\nplead\\npleat\\nplied\\nplier\\npluck\\nplumb\\nplume\\nplump\\nplunk\\nplush\\npoesy\\npoint\\npoise\\npoker\\npolar\\npolka\\npolyp\\npooch\\npoppy\\nporch\\nposer\\nposit\\nposse\\npouch\\npound\\npouty\\npower\\nprank\\nprawn\\npreen\\npress\\nprice\\nprick\\npride\\npried\\nprime\\nprimo\\nprint\\nprior\\nprism\\nprivy\\nprize\\nprobe\\nprone\\nprong\\nproof\\nprose\\nproud\\nprove\\nprowl\\nproxy\\nprude\\nprune\\npsalm\\npubic\\npudgy\\npuffy\\npulpy\\npulse\\npunch\\npupil\\npuppy\\npuree\\npurer\\npurge\\npurse\\npushy\\nputty\\npygmy\\nquack\\nquail\\nquake\\nqualm\\nquark\\nquart\\nquash\\nquasi\\nqueen\\nqueer\\nquell\\nquery\\nquest\\nqueue\\nquick\\nquiet\\nquill\\nquilt\\nquirk\\nquite\\nquota\\nquote\\nquoth\\nrabbi\\nrabid\\nracer\\nradar\\nradii\\nradio\\nrainy\\nraise\\nrajah\\nrally\\nralph\\nramen\\nranch\\nrandy\\nrange\\nrapid\\nrarer\\nraspy\\nratio\\nratty\\nraven\\nrayon\\nrazor\\nreach\\nreact\\nready\\nrealm\\nrearm\\nrebar\\nrebel\\nrebus\\nrebut\\nrecap\\nrecur\\nrecut\\nreedy\\nrefer\\nrefit\\nregal\\nrehab\\nreign\\nrelax\\nrelay\\nrelic\\nremit\\nrenal\\nrenew\\nrepay\\nrepel\\nreply\\nrerun\\nreset\\nresin\\nretch\\nretro\\nretry\\nreuse\\nrevel\\nrevue\\nrhino\\nrhyme\\nrider\\nridge\\nrifle\\nright\\nrigid\\nrigor\\nrinse\\nripen\\nriper\\nrisen\\nriser\\nrisky\\nrival\\nriver\\nrivet\\nroach\\nroast\\nrobin\\nrobot\\nrocky\\nrodeo\\nroger\\nrogue\\nroomy\\nroost\\nrotor\\nrouge\\nrough\\nround\\nrouse\\nroute\\nrover\\nrowdy\\nrower\\nroyal\\nruddy\\nruder\\nrugby\\nruler\\nrumba\\nrumor\\nrupee\\nrural\\nrusty\\nsadly\\nsafer\\nsaint\\nsalad\\nsally\\nsalon\\nsalsa\\nsalty\\nsalve\\nsalvo\\nsandy\\nsaner\\nsappy\\nsassy\\nsatin\\nsatyr\\nsauce\\nsaucy\\nsauna\\nsaute\\nsavor\\nsavoy\\nsavvy\\nscald\\nscale\\nscalp\\nscaly\\nscamp\\nscant\\nscare\\nscarf\\nscary\\nscene\\nscent\\nscion\\nscoff\\nscold\\nscone\\nscoop\\nscope\\nscore\\nscorn\\nscour\\nscout\\nscowl\\nscram\\nscrap\\nscree\\nscrew\\nscrub\\nscrum\\nscuba\\nsedan\\nseedy\\nsegue\\nseize\\nsemen\\nsense\\nsepia\\nserif\\nserum\\nserve\\nsetup\\nseven\\nsever\\nsewer\\nshack\\nshade\\nshady\\nshaft\\nshake\\nshaky\\nshale\\nshall\\nshalt\\nshame\\nshank\\nshape\\nshard\\nshare\\nshark\\nsharp\\nshave\\nshawl\\nshear\\nsheen\\nsheep\\nsheer\\nsheet\\nsheik\\nshelf\\nshell\\nshied\\nshift\\nshine\\nshiny\\nshire\\nshirk\\nshirt\\nshoal\\nshock\\nshone\\nshook\\nshoot\\nshore\\nshorn\\nshort\\nshout\\nshove\\nshown\\nshowy\\nshrew\\nshrub\\nshrug\\nshuck\\nshunt\\nshush\\nshyly\\nsiege\\nsieve\\nsight\\nsigma\\nsilky\\nsilly\\nsince\\nsinew\\nsinge\\nsiren\\nsissy\\nsixth\\nsixty\\nskate\\nskier\\nskiff\\nskill\\nskimp\\nskirt\\nskulk\\nskull\\nskunk\\nslack\\nslain\\nslang\\nslant\\nslash\\nslate\\nsleek\\nsleep\\nsleet\\nslept\\nslice\\nslick\\nslide\\nslime\\nslimy\\nsling\\nslink\\nsloop\\nslope\\nslosh\\nsloth\\nslump\\nslung\\nslunk\\nslurp\\nslush\\nslyly\\nsmack\\nsmall\\nsmart\\nsmash\\nsmear\\nsmell\\nsmelt\\nsmile\\nsmirk\\nsmite\\nsmith\\nsmock\\nsmoke\\nsmoky\\nsmote\\nsnack\\nsnail\\nsnake\\nsnaky\\nsnare\\nsnarl\\nsneak\\nsneer\\nsnide\\nsniff\\nsnipe\\nsnoop\\nsnore\\nsnort\\nsnout\\nsnowy\\nsnuck\\nsnuff\\nsoapy\\nsober\\nsoggy\\nsolar\\nsolid\\nsolve\\nsonar\\nsonic\\nsooth\\nsooty\\nsorry\\nsound\\nsouth\\nsower\\nspace\\nspade\\nspank\\nspare\\nspark\\nspasm\\nspawn\\nspeak\\nspear\\nspeck\\nspeed\\nspell\\nspelt\\nspend\\nspent\\nsperm\\nspice\\nspicy\\nspied\\nspiel\\nspike\\nspiky\\nspill\\nspilt\\nspine\\nspiny\\nspire\\nspite\\nsplat\\nsplit\\nspoil\\nspoke\\nspoof\\nspook\\nspool\\nspoon\\nspore\\nsport\\nspout\\nspray\\nspree\\nsprig\\nspunk\\nspurn\\nspurt\\nsquad\\nsquat\\nsquib\\nstack\\nstaff\\nstage\\nstaid\\nstain\\nstair\\nstake\\nstale\\nstalk\\nstall\\nstamp\\nstand\\nstank\\nstare\\nstark\\nstart\\nstash\\nstate\\nstave\\nstead\\nsteak\\nsteal\\nsteam\\nsteed\\nsteel\\nsteep\\nsteer\\nstein\\nstern\\nstick\\nstiff\\nstill\\nstilt\\nsting\\nstink\\nstint\\nstock\\nstoic\\nstoke\\nstole\\nstomp\\nstone\\nstony\\nstood\\nstool\\nstoop\\nstore\\nstork\\nstorm\\nstory\\nstout\\nstove\\nstrap\\nstraw\\nstray\\nstrip\\nstrut\\nstuck\\nstudy\\nstuff\\nstump\\nstung\\nstunk\\nstunt\\nstyle\\nsuave\\nsugar\\nsuing\\nsuite\\nsulky\\nsully\\nsumac\\nsunny\\nsuper\\nsurer\\nsurge\\nsurly\\nsushi\\nswami\\nswamp\\nswarm\\nswash\\nswath\\nswear\\nsweat\\nsweep\\nsweet\\nswell\\nswept\\nswift\\nswill\\nswine\\nswing\\nswirl\\nswish\\nswoon\\nswoop\\nsword\\nswore\\nsworn\\nswung\\nsynod\\nsyrup\\ntabby\\ntable\\ntaboo\\ntacit\\ntacky\\ntaffy\\ntaint\\ntaken\\ntaker\\ntally\\ntalon\\ntamer\\ntango\\ntangy\\ntaper\\ntapir\\ntardy\\ntarot\\ntaste\\ntasty\\ntatty\\ntaunt\\ntawny\\nteach\\nteary\\ntease\\nteddy\\nteeth\\ntempo\\ntenet\\ntenor\\ntense\\ntenth\\ntepee\\ntepid\\nterra\\nterse\\ntesty\\nthank\\ntheft\\ntheir\\ntheme\\nthere\\nthese\\ntheta\\nthick\\nthief\\nthigh\\nthing\\nthink\\nthird\\nthong\\nthorn\\nthose\\nthree\\nthrew\\nthrob\\nthrow\\nthrum\\nthumb\\nthump\\nthyme\\ntiara\\ntibia\\ntidal\\ntiger\\ntight\\ntilde\\ntimer\\ntimid\\ntipsy\\ntitan\\ntithe\\ntitle\\ntoast\\ntoday\\ntoddy\\ntoken\\ntonal\\ntonga\\ntonic\\ntooth\\ntopaz\\ntopic\\ntorch\\ntorso\\ntorus\\ntotal\\ntotem\\ntouch\\ntough\\ntowel\\ntower\\ntoxic\\ntoxin\\ntrace\\ntrack\\ntract\\ntrade\\ntrail\\ntrain\\ntrait\\ntramp\\ntrash\\ntrawl\\ntread\\ntreat\\ntrend\\ntriad\\ntrial\\ntribe\\ntrice\\ntrick\\ntried\\ntripe\\ntrite\\ntroll\\ntroop\\ntrope\\ntrout\\ntrove\\ntruce\\ntruck\\ntruer\\ntruly\\ntrump\\ntrunk\\ntruss\\ntrust\\ntruth\\ntryst\\ntubal\\ntuber\\ntulip\\ntulle\\ntumor\\ntunic\\nturbo\\ntutor\\ntwang\\ntweak\\ntweed\\ntweet\\ntwice\\ntwine\\ntwirl\\ntwist\\ntwixt\\ntying\\nudder\\nulcer\\nultra\\numbra\\nuncle\\nuncut\\nunder\\nundid\\nundue\\nunfed\\nunfit\\nunify\\nunion\\nunite\\nunity\\nunlit\\nunmet\\nunset\\nuntie\\nuntil\\nunwed\\nunzip\\nupper\\nupset\\nurban\\nurine\\nusage\\nusher\\nusing\\nusual\\nusurp\\nutile\\nutter\\nvague\\nvalet\\nvalid\\nvalor\\nvalue\\nvalve\\nvapid\\nvapor\\nvault\\nvaunt\\nvegan\\nvenom\\nvenue\\nverge\\nverse\\nverso\\nverve\\nvicar\\nvideo\\nvigil\\nvigor\\nvilla\\nvinyl\\nviola\\nviper\\nviral\\nvirus\\nvisit\\nvisor\\nvista\\nvital\\nvivid\\nvixen\\nvocal\\nvodka\\nvogue\\nvoice\\nvoila\\nvomit\\nvoter\\nvouch\\nvowel\\nvying\\nwacky\\nwafer\\nwager\\nwagon\\nwaist\\nwaive\\nwaltz\\nwarty\\nwaste\\nwatch\\nwater\\nwaver\\nwaxen\\nweary\\nweave\\nwedge\\nweedy\\nweigh\\nweird\\nwelch\\nwelsh\\nwhack\\nwhale\\nwharf\\nwheat\\nwheel\\nwhelp\\nwhere\\nwhich\\nwhiff\\nwhile\\nwhine\\nwhiny\\nwhirl\\nwhisk\\nwhite\\nwhole\\nwhoop\\nwhose\\nwiden\\nwider\\nwidow\\nwidth\\nwield\\nwight\\nwilly\\nwimpy\\nwince\\nwinch\\nwindy\\nwiser\\nwispy\\nwitch\\nwitty\\nwoken\\nwoman\\nwomen\\nwoody\\nwooer\\nwooly\\nwoozy\\nwordy\\nworld\\nworry\\nworse\\nworst\\nworth\\nwould\\nwound\\nwoven\\nwrack\\nwrath\\nwreak\\nwreck\\nwrest\\nwring\\nwrist\\nwrite\\nwrong\\nwrote\\nwrung\\nwryly\\nyacht\\nyearn\\nyeast\\nyield\\nyoung\\nyouth\\nzebra\\nzesty\\nzonal\";","import { useState } from 'preact/hooks';\nimport classnames from 'classnames';\n\nimport { countLettersByPosition, sortLetterCounts } from '../utilities/words';\nimport styles from './LetterPositions.module.css';\n\n//??? rearrange by column using indices\n//??? implement graph\nexport default function LetterPositions({ words }) {\n  const indices = Array.from(Array(5).keys());\n  const byLetter = indices.map(index => countLettersByPosition(index, words));\n  const sortedCounts = byLetter.map(byLetter => sortLetterCounts(byLetter));\n  const total = words.length;\n\n  const [selected, setSelected] = useState('');\n  const percents = sortedCounts[4].map(sc => 100 * (sc[1] / total));\n\n  const onKeyDown = (key) => {\n    setSelected((last) => {\n      if (key === 'Backspace') {\n        return last.slice(0, -1);\n      } else {\n        const lowKey = key.toLowerCase();\n\n        if (lowKey.match(/^[a-z]$/)) {\n          const added = `${last}${lowKey}`;\n          return added.slice(0, 5);\n        }\n        return last;\n      }\n    });\n  };\n\n  return (\n    <div className={styles.main}>\n      {buildBoxes(indices, selected, onKeyDown)}\n      {buildGraphs(byLetter, total, selected)}\n      {buildColumns(sortedCounts, total, selected)}\n    </div>\n  );\n}\n\nfunction buildBoxes(indices, selected, onKeyDown) {\n  return (\n    <label className={styles.label}> \n      <div className={styles.boxes}>\n        {indices.map((index) => {\n          const letter = selected[index] ?? '';\n          return (\n            <div className={styles.box}>\n              {letter}\n            </div>\n          );\n        })}\n      </div>\n      <input\n        type='text'\n        className={styles.input}\n        value={selected}\n        onKeyDown={(e) => onKeyDown(e.key)}\n      />\n    </label>\n  );\n}\n\nfunction buildColumns(sortedCounts, total, selected) {\n  return (\n    <div className={styles.columns}>\n      {sortedCounts.map(counts => buildColumn(counts, total))}\n    </div>\n  );\n}\n\nfunction buildColumn(counts, total) {\n  return (\n    <div className={styles.column}>\n      {counts.map(count => buildLetter(count, total))}\n    </div>\n  );\n}\n\nfunction buildLetter(count, total) {\n  const letter = count[0];\n  const value = count[1];\n  const { green, yellow, gray } = getColors(value, total);\n  const classes = classnames({\n    [styles.letterCount]: true,\n    [styles.gray]: gray,\n    [styles.yellow]: yellow,\n    [styles.green]: green,\n  });\n\n  return (\n    <div className={classes}>\n      <div className={styles.letter}>\n        {letter}\n      </div>\n      <div className={styles.count}>\n        {value}\n      </div>\n    </div>\n  );\n}\n\nfunction buildGraphs(byLetter, total, selected) {\n  //const { percent, green, yellow, gray } = getColors(value, total);\n  console.log('GR', byLetter, total, selected);\n\n  return (\n    <div></div>\n    /*\n    <div\n      className={styles.graph}\n      onClick={() => onClick('')}\n    >\n      GRAPH\n    </div>\n    */\n  );\n}\n\nfunction getColors(value, total) {\n  const percent = 100 * (value / total);\n  const green = percent >= 10;\n  const yellow = !green && percent >= 3;\n  const gray = !green && !yellow && percent > 1;\n\n  return { percent, green, yellow, gray };\n}\n"],"sourceRoot":""}